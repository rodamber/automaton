[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @280:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @280:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @280:17...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @280:17...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @278:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @278:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @278:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @278:73:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @275:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @275:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @275:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @275:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @276:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @276:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @273:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @273:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @190:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @190:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @187:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @187:65...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @157:8...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @157:8...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @163:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @163:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @164:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @164:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @164:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @164:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @164:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @164:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @154:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @154:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @159:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @159:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @151:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @151:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @151:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @151:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @149:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @149:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @149:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @149:3...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @173:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetRefl @173:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetRefl @173:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetRefl @173:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @257:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @257:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @257:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @257:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @262:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @262:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @262:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @262:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @265:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @265:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @266:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @266:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @266:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @266:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @267:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @267:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @267:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @267:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @267:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @267:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @268:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @268:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @268:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @268:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @261:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @261:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @255:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @255:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @259:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @259:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @234:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @234:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @234:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @234:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @234:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @234:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @232:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @232:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @232:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @232:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @223:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @223:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @242:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @242:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @248:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @248:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @248:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @248:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @248:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @248:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @248:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @248:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @248:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @248:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @249:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @249:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @249:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @249:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @249:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @249:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @239:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @239:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @244:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @244:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @202:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @202:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @209:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @209:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @210:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @210:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @210:32...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @210:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @211:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @211:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @211:12...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @211:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @211:48...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @211:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @211:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @211:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @212:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @212:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @212:11...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @212:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @212:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @212:61...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @200:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @200:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @204:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @204:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @197:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @197:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @197:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @197:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @195:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @195:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @195:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @195:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @129:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @129:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @136:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @136:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @138:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @138:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @139:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @139:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @127:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @127:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @131:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @131:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @124:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @124:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @124:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @124:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @122:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @122:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @122:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @122:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @72:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @72:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @71:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @81:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @81:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @78:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @78:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @86:21...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @86:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @83:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @83:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @76:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @76:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @75:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @75:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for + @52:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for + @52:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for - @59:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for - @59:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:47...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @64:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @64:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @68:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @68:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @68:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @68:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @68:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @68:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @68:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @68:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @68:63...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @68:63...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @68:63...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @68:63:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @62:81...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @62:81...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @62:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @62:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:36...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @43:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @43:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @55:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:47...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:47...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:47...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:47:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:58...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:58...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @56:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @56:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @56:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @56:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @56:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @56:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @49:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @31:53:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @39:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @53:17...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for lemma @53:17...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for lemma @53:17...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for lemma @53:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @54:17...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for lemma @54:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @180:5...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @180:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @180:31...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @180:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @180:46...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @180:46...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosureIdem @178:69...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosureIdem @178:69...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosureIdem @178:69...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosureIdem @178:69:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @156:15...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @156:15...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @160:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @160:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @161:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @161:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @161:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @161:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @122:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @122:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @125:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @125:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @27:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @130:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @130:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @147:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @147:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @130:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @130:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @131:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @131:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @138:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @138:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @139:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @139:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @140:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @140:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @144:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @144:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @146:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @146:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @147:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @147:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @148:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @148:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @152:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @152:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @169:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @169:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @171:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @171:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @173:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @173:34...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                               ║
[[34m  Info  [0m] ║ [33mapply[0m                  [33madt invariant[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:27:5[0m    [33m15.210[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m            [33mprecond. (call lemma[State, Sym](nfa, init, word))[0m            [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:68:63[0m   [33m15.312[0m ║
[[34m  Info  [0m] ║ [33mepsClosureIdem[0m         [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:178:69[0m  [33m15.530[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:31:53[0m   [33m15.767[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call |[Set[State], Set[State], Set[State]](|[ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:41:9[0m    [33m15.835[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call |[Set[State], Set[State]](|[Set[State],  ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:41:9[0m    [33m15.779[0m ║
[[34m  Info  [0m] ║ [33mstrictSubsetIsSmaller[0m  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:278:73[0m       [33m15.275[0m ║
[[34m  Info  [0m] ║ [33msubsetRefl[0m             [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:173:5[0m        [33m15.076[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 279  valid: 271  (248 from cache) invalid: 0    unknown: 8    time: 144.613[0m                                                     ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 153847 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @79:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @79:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @79:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @79:1...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @100:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @100:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @100:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @100:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @107:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @107:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @64:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @64:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @66:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @66:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @66:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @66:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @69:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @69:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @69:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @69:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @69:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @70:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @70:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:63...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:63...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:63...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:63:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @66:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @62:81...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @62:81...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @62:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @62:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for dfaNfaEquiv @73:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @41:9:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @41:9:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:36...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @43:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @43:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:47...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:58...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:58...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @56:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @56:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @56:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @56:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @31:53:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @53:17...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for lemma @53:17...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @54:17...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for lemma @54:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @182:5...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @182:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @182:31...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @182:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @182:46...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @182:46...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosureIdem @180:69...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosureIdem @180:69...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosureIdem @180:69...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosureIdem @180:69:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @158:15...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @158:15...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @92:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @92:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @85:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @85:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @87:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @87:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @162:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @162:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @163:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @163:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @163:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @163:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @121:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @121:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @125:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @125:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @125:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @125:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @124:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @124:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @127:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @127:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @120:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @120:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @27:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @132:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @132:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @149:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @149:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @152:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @152:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @132:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @132:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @133:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @133:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @140:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @140:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @141:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @142:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @142:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @146:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @146:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @148:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @148:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @149:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @149:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @150:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @150:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @154:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @154:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @135:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @135:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @81:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @81:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @78:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @78:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @275:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @275:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @275:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @275:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @276:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @276:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @273:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @273:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @257:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @257:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @257:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @257:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @257:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @262:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @262:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @262:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @262:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @264:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @265:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @265:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @265:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @265:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @266:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @266:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @266:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @266:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @266:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @267:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @267:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @267:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @267:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @267:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @267:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @268:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @268:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @268:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @268:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @261:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @261:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @255:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @255:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @259:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @259:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @234:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @234:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @234:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @234:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @236:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @236:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @234:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @234:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @232:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @232:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @232:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @232:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @223:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @223:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @242:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @242:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @247:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @247:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @248:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @248:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @248:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @248:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @248:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @248:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @248:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @248:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @248:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @248:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @249:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @249:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @249:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @249:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @249:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @249:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @239:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @239:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @244:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @244:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @202:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @202:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @209:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @209:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @210:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @210:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @210:32...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @210:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @211:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @211:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @211:12...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @211:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @211:48...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @211:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @211:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @211:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @212:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @212:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @212:11...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @212:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @212:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @212:61...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @200:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @200:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @204:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @204:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @197:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @197:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @197:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @197:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @195:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @195:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @195:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @195:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @86:21...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @86:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @83:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @83:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @280:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @280:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @280:17...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @280:17...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @278:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @278:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @278:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @278:73:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @76:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @76:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @75:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @75:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @189:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @190:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @190:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @190:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @187:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @187:65...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @173:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetRefl @173:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetRefl @173:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetRefl @173:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @171:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @171:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @173:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @173:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @175:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @175:34...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @112:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @112:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @113:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @113:24...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @72:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @72:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @71:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @157:8...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @157:8...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @162:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @163:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @163:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @163:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @163:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @164:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @164:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @164:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @164:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @164:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @164:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @154:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @154:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @159:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @159:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @151:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @151:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @151:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @151:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @149:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @149:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @149:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @149:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:47...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @129:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @129:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @136:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @136:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @138:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @138:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @139:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @139:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @127:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @127:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @131:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @131:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @124:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @124:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @124:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @124:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @122:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @122:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @122:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @122:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                               ║
[[34m  Info  [0m] ║ [33mapply[0m                  [33madt invariant[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:27:5[0m    [33m15.200[0m ║
[[34m  Info  [0m] ║ [33mepsClosureIdem[0m         [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:180:69[0m  [33m15.509[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:31:53[0m   [33m15.686[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call |[Set[State], Set[State], Set[State]](|[ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:41:9[0m    [33m16.024[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call |[Set[State], Set[State]](|[Set[State],  ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:41:9[0m    [33m15.764[0m ║
[[34m  Info  [0m] ║ [33mstrictSubsetIsSmaller[0m  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:278:73[0m       [33m15.057[0m ║
[[34m  Info  [0m] ║ [33msubsetRefl[0m             [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:173:5[0m        [33m15.094[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 281  valid: 274  (261 from cache) invalid: 0    unknown: 7    time: 119.474[0m                                                     ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 122526 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
