[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @267:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @267:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @264:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @264:65...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @339:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @339:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @339:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @339:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @340:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @340:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @337:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @337:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @250:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @250:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @250:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @250:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @247:76...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @247:76...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](xs, set2, set3))' VC for subsetTrans @213:29...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](xs, set2, set3))' VC for subsetTrans @213:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsTrans[T](set2, set3, x))' VC for subsetTrans @213:60...
[[34m  Info  [0m] Cache hit: 'precond. (call containsTrans[T](set2, set3, x))' VC for subsetTrans @213:60...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @207:78...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetTrans @207:78...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetTrans @211:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetTrans @211:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @254:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @254:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @254:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @254:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @256:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @256:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @256:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @256:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @257:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @257:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @257:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @257:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @252:79...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @252:79...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @252:51...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @252:51...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @225:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @225:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @226:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @226:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @232:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @232:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @233:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @233:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @233:18...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @233:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @233:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @233:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @234:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @234:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @234:10...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @234:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @234:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @234:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @234:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @234:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @235:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @235:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @238:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @238:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @238:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @238:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @238:28...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @238:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @239:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @239:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @223:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @223:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @223:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @223:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @228:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @228:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @230:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @230:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @232:9...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @232:9...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @233:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @233:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @148:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @148:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @148:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @148:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @146:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @146:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @146:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @146:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @146:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @146:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @148:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @148:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @154:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @154:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @154:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @154:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @152:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @152:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @344:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @344:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @344:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @344:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call notSubsetContains[T](s1, s2))' VC for strictSubsetIsSmaller @346:12...
[[34m  Info  [0m] Cache hit: 'precond. (call notSubsetContains[T](s1, s2))' VC for strictSubsetIsSmaller @346:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call find[T](s1, (x$4: T) => { ...)' VC for strictSubsetIsSmaller @347:13...
[[34m  Info  [0m] Cache hit: 'precond. (call find[T](s1, (x$4: T) => { ...)' VC for strictSubsetIsSmaller @347:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @349:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @349:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @349:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @349:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @350:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @350:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @350:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @350:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @350:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @350:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](s1, s2))' VC for strictSubsetIsSmaller @350:33...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](s1, s2))' VC for strictSubsetIsSmaller @350:33...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @351:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @351:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](s1, s2)))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](s1, s2)))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](s1, s2))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](s1, s2))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](s1, s2, x))' VC for strictSubsetIsSmaller @351:33...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](s1, s2, x))' VC for strictSubsetIsSmaller @351:33...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for strictSubsetIsSmaller @345:19...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for strictSubsetIsSmaller @345:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @342:69...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @342:69...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss, p))' VC for find @35:13...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss, p))' VC for find @35:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call find[T](xs, p))' VC for find @37:46...
[[34m  Info  [0m] Cache hit: 'precond. (call find[T](xs, p))' VC for find @37:46...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for find @39:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for find @39:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for find @39:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for find @39:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for find @34:12...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for find @34:12...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for find @36:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for find @36:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for find @37:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for find @37:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for find @39:28...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for find @39:28...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for find @39:28...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for find @39:28:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @321:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @321:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @321:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @321:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @326:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @326:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @330:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @330:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @330:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @330:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @331:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @331:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @331:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @331:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @331:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @331:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @332:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @332:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @332:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @332:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @325:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @325:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @319:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @319:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @323:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @323:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @314:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @314:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @314:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @314:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:43...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:43...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:43...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @314:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @314:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @312:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @312:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @312:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @312:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetCons[T](xs, xs, x))' VC for subsetTail @195:27...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetCons[T](xs, xs, x))' VC for subsetTail @195:27...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @188:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetRefl @188:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTail @192:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetTail @192:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetTail @192:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetTail @192:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USCons)' VC for subsetCons @201:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USCons)' VC for subsetCons @201:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USNil)' VC for subsetCons @201:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USNil)' VC for subsetCons @201:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @271:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @271:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @277:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @277:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @278:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @278:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @278:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @278:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @278:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @278:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @269:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @269:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @273:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @273:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @287:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @287:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @287:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @287:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @285:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @285:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @285:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @285:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @67:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @67:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @72:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @72:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @72:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @72:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @73:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @73:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @75:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @75:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @71:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @71:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @77:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @77:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @69:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @69:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @69:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @69:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @128:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @128:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @135:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @135:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @136:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @136:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @137:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @137:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @138:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @138:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @126:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @126:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @130:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @130:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USCons))' VC for notSubsetContains @358:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USCons))' VC for notSubsetContains @358:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USNil))' VC for notSubsetContains @358:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USNil))' VC for notSubsetContains @358:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USCons)' VC for notSubsetContains @356:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USCons)' VC for notSubsetContains @356:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USNil)' VC for notSubsetContains @356:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USNil)' VC for notSubsetContains @356:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @31:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @31:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @29:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @29:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @29:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @29:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @31:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @31:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @295:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @295:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @301:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @301:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @301:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @301:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @301:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @301:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @301:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @301:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @302:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @302:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @302:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @302:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @302:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @302:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @293:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @293:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @297:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @92:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @92:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @97:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @97:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @97:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @97:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @98:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @98:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @100:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @100:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @96:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @96:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @102:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @102:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @94:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @94:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @94:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @94:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @168:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @168:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @175:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @175:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @176:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @176:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @176:32...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @176:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @177:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @177:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @177:12...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @177:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @177:48...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @177:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @177:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @177:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @178:11...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @178:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @178:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @178:61...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @166:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @166:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @170:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @170:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @46:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @46:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @48:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @48:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @44:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @44:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @163:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @163:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @163:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @163:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @161:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @161:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @161:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @161:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @86:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @86:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @82:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @82:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for containsTrans @218:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for containsTrans @218:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for containsTrans @218:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for containsTrans @218:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @123:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @123:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @123:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @123:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @121:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @121:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @121:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @121:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @60:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @60:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @53:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @53:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @112:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @112:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for find
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetTail
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetRefl
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTrans
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @64:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @64:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @63:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @63:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @55:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @55:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @52:73...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @52:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @73:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @73:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @70:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @70:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @59:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @59:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @59:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @59:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @60:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @60:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @57:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @57:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @57:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @57:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @78:19:
[[33mWarning [0m]  => INVALID
[[33mWarning [0m] Found counter-example:
[[33mWarning [0m]   set2: Set[T] -> Set[T](USCons[T](T#6, USNil[T]()))
[[33mWarning [0m]   set1: Set[T] -> Set[T](USNil[T]())
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @75:71:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @68:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @68:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @67:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @67:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @45:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @45:47...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTrans
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTail
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetRefl
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for find
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m] Cache miss: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Now solving 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Result for 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @67:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @67:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @67:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @67:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @64:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @64:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @64:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @64:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @88:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @88:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @103:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @103:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @153:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @153:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @31:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @31:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @41:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @41:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @58:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @58:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:45...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @49:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @50:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @30:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @30:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @30:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @30:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @37:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @37:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @37:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @37:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @149:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @149:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @117:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @117:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @121:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @121:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @120:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @120:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @123:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @123:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @123:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @123:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @116:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @116:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @127:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @127:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @141:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @141:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @134:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @134:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @135:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @135:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @139:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @139:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @141:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @141:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @141:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @145:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @145:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @145:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @145:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @131:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @131:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @162:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @162:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @164:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @164:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @166:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @166:34...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @81:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @81:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @83:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @83:29...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @108:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @108:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @109:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @109:24...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTail
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetRefl
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for find
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetTrans
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTail
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetRefl
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for find
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTrans
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @14:38...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @14:38...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for inv @14:56...
[[34m  Info  [0m] Cache hit: 'map usage' VC for inv @14:56...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for inv @14:56...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for inv @14:56...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](dfa, mem, dfa.initialS ...)' VC for equiv @62:19...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](dfa, mem, dfa.initialS ...)' VC for equiv @62:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for equiv @59:53...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for equiv @59:53...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](dfa, newMem, dfa.move( ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](dfa, newMem, dfa.move( ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @46:63...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for lemma @46:63...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @50:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for lemma @50:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @53:13...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for lemma @53:13...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @54:28...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for lemma @54:28...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for accepts @37:9...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for accepts @37:9...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @38:6...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @38:6...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @28:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @28:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @31:13...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @31:13...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @19:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @19:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @22:17...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @22:17...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for move @23:13...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for move @23:13...
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                       ║
[[34m  Info  [0m] ║ [31mstrictSubsetIsSmaller[0m  [31mprecond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)[0m  [31minvalid[0m  [31mnativez3[0m  [31mSet.scala:78:19[0m  [31m0.125[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 365  valid: 364  (322 from cache) invalid: 1    unknown: 0    time:  17.733[0m                                             ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 71   valid: 71   (0 from cache) invalid: 0    unknown: 0    time:  86.749[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 115261 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Set.scala
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @75:1...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @66:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @67:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @69:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m] Cache miss: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Now solving 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7...
[[34m  Info  [0m]  - Result for 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @70:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @67:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @67:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @67:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @67:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @64:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @64:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @64:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @64:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @88:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @88:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @96:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @103:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @103:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @153:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @153:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @154:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @154:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @31:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @31:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @39:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @40:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @41:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @41:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @42:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:32:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @49:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @50:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @50:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @53:45:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @54:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @55:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @57:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @58:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @58:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:45...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @49:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @49:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @50:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @30:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @30:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @30:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @30:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @37:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @37:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @37:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @37:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @149:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @149:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @117:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @117:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @121:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @121:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @121:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @120:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @120:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @123:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @123:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @123:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @123:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @116:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @116:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @55:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @55:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @52:73...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @52:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @250:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @250:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @250:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @250:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @247:76...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @247:76...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](xs, set2, set3))' VC for subsetTrans @213:29...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](xs, set2, set3))' VC for subsetTrans @213:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsTrans[T](set2, set3, x))' VC for subsetTrans @213:60...
[[34m  Info  [0m] Cache hit: 'precond. (call containsTrans[T](set2, set3, x))' VC for subsetTrans @213:60...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @207:78...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetTrans @207:78...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetTrans @211:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetTrans @211:5...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @59:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @59:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @59:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @59:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @60:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @60:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @57:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @57:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @57:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @57:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @254:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @254:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @254:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @254:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @256:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @256:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @256:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @256:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @257:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @257:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @257:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @257:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @252:79...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @252:79...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @252:51...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @252:51...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @225:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @225:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @226:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @226:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @231:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @231:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @232:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @232:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @233:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @233:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @233:18...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @233:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @233:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @233:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @234:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @234:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @234:10...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @234:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @234:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @234:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @234:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @234:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @235:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @235:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @237:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @237:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @238:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @238:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @238:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @238:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @238:28...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @238:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @239:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @239:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @223:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @223:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @223:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @223:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @228:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @228:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @230:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @230:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @232:9...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @232:9...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @233:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @233:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @148:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @148:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @148:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @148:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @146:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @146:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @146:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @146:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @146:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @146:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @148:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @148:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @154:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @154:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @154:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @154:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @152:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @152:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @127:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @127:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @141:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @141:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @143:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @134:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @134:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @135:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @135:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @139:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @139:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @141:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @141:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @141:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @145:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @145:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @145:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @145:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @131:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @131:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @162:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @162:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @164:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @164:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @166:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @166:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @64:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @64:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @63:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @63:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @73:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @73:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @70:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @70:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @339:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @339:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @339:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @339:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @340:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @340:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @337:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @337:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set2.uset, set1 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[T](set2.uset, set1 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[T](set2.uset, set1 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[T](set2.uset, set1 ...)' VC for strictSubsetIsSmaller @78:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @75:71:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @344:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @344:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @344:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @344:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call notSubsetContains[T](s1, s2))' VC for strictSubsetIsSmaller @346:12...
[[34m  Info  [0m] Cache hit: 'precond. (call notSubsetContains[T](s1, s2))' VC for strictSubsetIsSmaller @346:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call find[T](s1, (x$4: T) => { ...)' VC for strictSubsetIsSmaller @347:13...
[[34m  Info  [0m] Cache hit: 'precond. (call find[T](s1, (x$4: T) => { ...)' VC for strictSubsetIsSmaller @347:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @349:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @349:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @349:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @349:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @349:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @350:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @350:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @350:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s1))' VC for strictSubsetIsSmaller @350:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @350:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](s2))' VC for strictSubsetIsSmaller @350:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](s1, s2))' VC for strictSubsetIsSmaller @350:33...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](s1, s2))' VC for strictSubsetIsSmaller @350:33...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @351:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for strictSubsetIsSmaller @351:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](s1, s2)))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](s1, s2)))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](s1, s2))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](s1, s2))' VC for strictSubsetIsSmaller @351:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](s1, s2, x))' VC for strictSubsetIsSmaller @351:33...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](s1, s2, x))' VC for strictSubsetIsSmaller @351:33...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for strictSubsetIsSmaller @345:19...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for strictSubsetIsSmaller @345:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @342:69...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @342:69...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss, p))' VC for find @35:13...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss, p))' VC for find @35:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call find[T](xs, p))' VC for find @37:46...
[[34m  Info  [0m] Cache hit: 'precond. (call find[T](xs, p))' VC for find @37:46...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for find @39:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for find @39:16...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for find @34:12...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for find @34:12...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for find @36:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for find @36:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for find @37:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for find @37:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for find @39:28...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for find @39:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @321:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @321:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @321:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @321:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @321:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @326:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @326:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @329:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @330:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @330:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @330:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @330:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @330:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @331:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @331:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @331:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @331:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @331:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @331:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @332:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @332:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @332:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @332:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @325:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @325:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @319:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @319:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @323:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @323:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @314:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @314:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @314:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @314:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:43...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @316:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:43...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @316:43...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @314:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @314:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @312:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @312:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @312:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @312:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @68:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @68:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @67:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @67:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @266:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @267:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @267:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @267:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @264:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @264:65...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetCons[T](xs, xs, x))' VC for subsetTail @195:27...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetCons[T](xs, xs, x))' VC for subsetTail @195:27...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @188:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetRefl @188:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTail @192:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetTail @192:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetTail @192:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetTail @192:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USCons)' VC for subsetCons @201:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USCons)' VC for subsetCons @201:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USNil)' VC for subsetCons @201:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USNil)' VC for subsetCons @201:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @271:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @271:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @276:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @277:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @277:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @277:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @277:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @278:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @278:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @278:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @278:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @278:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @278:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @269:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @269:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @273:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @273:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @287:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @287:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @287:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @287:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @285:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @285:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @285:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @285:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USCons))' VC for notSubsetContains @358:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USCons))' VC for notSubsetContains @358:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USNil))' VC for notSubsetContains @358:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](s1, (x: T) => { ..., ind. on (s1: USet[T] : USNil))' VC for notSubsetContains @358:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USCons)' VC for notSubsetContains @356:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USCons)' VC for notSubsetContains @356:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on s1: USet[T] / USNil)' VC for notSubsetContains @356:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on s1: USet[T] / USNil)' VC for notSubsetContains @356:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @31:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @31:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @29:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @29:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @29:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @29:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @31:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @31:27...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @81:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @81:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @83:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @83:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @295:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @295:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @300:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @300:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @301:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @301:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @301:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @301:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @301:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @301:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @301:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @301:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @302:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @302:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @302:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @302:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @302:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @302:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @293:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @293:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @297:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @92:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @92:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @97:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @97:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @97:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @97:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @98:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @98:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @100:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @100:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @96:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @96:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @102:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @102:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @94:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @94:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @94:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @94:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @168:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @168:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @175:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @175:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @175:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @175:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @176:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @176:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @176:32...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @176:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @177:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @177:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @177:12...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @177:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @177:48...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @177:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @177:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @177:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @178:11...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @178:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @178:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @178:61...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @166:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @166:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @170:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @170:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @163:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @163:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @163:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @163:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @161:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @161:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @161:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @161:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @86:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @86:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @82:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @82:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for containsTrans @218:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for containsTrans @218:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for containsTrans @218:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for containsTrans @218:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @45:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @45:47...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @108:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @108:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @109:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @109:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @67:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @67:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @72:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @72:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @72:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @72:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @73:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @73:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @75:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @75:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @71:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @71:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @77:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @77:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @69:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @69:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @69:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @69:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @128:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @128:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @135:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @135:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @136:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @136:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @137:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @137:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @138:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @138:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @126:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @126:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @130:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @130:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @46:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @46:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @48:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @48:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @44:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @44:5...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @123:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @123:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @123:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @123:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @121:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @121:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @121:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @121:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @60:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @60:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @53:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @53:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @112:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @112:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTail
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetRefl
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for find
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetTrans
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTail
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetRefl
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for find
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetTrans
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                           ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 363  valid: 363  (322 from cache) invalid: 0    unknown: 0    time:  16.044[0m ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 70   valid: 70   (0 from cache) invalid: 0    unknown: 0    time:  67.323[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 86825 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[33mWarning [0m] Interrupted...
[[34m  Info  [0m] Shutting down executor service.
