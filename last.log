[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isEmpty @29:26...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isEmpty @29:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @230:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @230:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @230:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @230:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @232:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @232:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @232:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @232:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @233:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @233:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @233:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @233:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @228:79...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @228:79...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @228:51...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @228:51...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @327:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @327:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @327:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @327:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @328:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @328:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @325:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @325:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @309:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @309:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @309:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @309:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @309:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @309:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @309:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @309:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @314:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @314:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @314:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @314:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @316:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @316:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @316:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @316:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @316:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @317:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @317:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @317:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @317:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @317:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @317:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @317:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @317:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @317:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @317:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @317:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @317:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @318:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @318:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @318:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @318:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @318:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @318:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @318:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @318:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @319:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @319:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @319:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @319:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @319:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @319:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @320:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @320:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @320:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @320:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @313:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @313:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @307:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @307:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @311:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @311:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @302:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @302:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @302:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @302:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @304:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @304:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @304:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @304:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @304:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @304:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @304:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @304:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @304:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @304:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @304:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @304:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @302:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @302:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @300:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @300:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @300:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @300:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @242:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @242:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @242:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @242:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @243:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @243:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @243:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @243:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @243:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @243:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @240:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @240:65...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @283:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @283:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @288:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @288:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @288:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @288:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @288:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @288:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @288:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @288:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @288:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @288:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @289:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @289:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @289:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @289:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @289:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @289:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @289:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @289:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @289:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @289:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @290:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @290:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @290:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @290:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @290:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @290:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @281:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @281:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @285:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @285:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @92:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @92:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @97:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @97:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @97:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @97:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @98:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @98:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @100:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @100:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @96:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @96:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @102:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @102:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @94:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @94:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @94:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @94:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @168:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @168:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @176:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @176:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @176:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @176:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @176:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @176:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @176:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @176:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @176:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @176:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @176:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @176:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @177:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @177:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @177:32...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @177:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @178:12...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @178:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @178:48...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @178:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @178:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @178:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @179:11...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @179:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @179:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @179:61...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @166:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @166:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @171:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @171:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @163:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @163:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @163:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @163:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @161:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @161:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @161:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @161:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @86:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @86:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @82:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @82:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @226:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @226:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @226:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @226:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @223:76...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @223:76...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @201:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @201:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @202:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @202:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @208:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @208:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @209:18...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @209:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @209:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @209:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @210:10...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @210:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @210:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @210:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @210:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @210:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @214:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @214:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @214:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @214:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @214:28...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @214:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @215:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @199:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @199:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @199:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @199:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @204:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @204:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @206:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @206:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @208:9...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @208:9...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @209:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @209:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @148:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @148:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @148:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @148:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @148:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @146:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @146:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @146:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @146:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @146:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @146:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @148:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @148:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @38:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @38:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @36:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @36:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @36:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @36:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:27...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @270:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @270:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @270:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @270:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @273:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @273:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @154:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @154:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @154:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @154:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @152:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @152:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @247:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @247:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @252:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @253:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @253:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @253:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @253:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @253:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @253:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @253:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @253:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @253:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @253:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @254:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @254:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @254:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @254:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @254:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @254:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @245:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @245:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @249:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @249:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @67:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @67:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @72:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @72:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @72:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @72:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @73:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @73:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @75:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @75:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @71:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @71:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @77:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @77:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @69:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @69:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @69:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @69:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @128:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @128:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @135:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @135:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @135:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @135:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @136:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @136:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @136:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @137:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @137:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @137:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @137:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @138:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @138:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @126:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @126:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @130:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @130:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @123:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @123:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @123:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @123:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @121:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @121:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @121:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @121:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @263:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @263:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @263:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @263:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @261:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @261:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @261:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @261:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @60:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @60:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @53:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @53:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @46:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @46:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @48:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @48:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @44:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @44:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @112:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @112:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @82:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @82:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @79:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @79:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @87:19...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @87:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @84:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @84:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @45:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @45:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @70:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @70:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @69:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @69:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @58:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @58:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @55:73...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @55:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @74:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @74:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @73:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @73:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @62:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @62:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @62:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @62:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @63:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @63:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @60:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @60:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @60:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @60:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m] Cache hit: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @43:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @43:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @60:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @60:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @60:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @60:45...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @32:53...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for lemma @32:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @122:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @122:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @125:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @125:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @147:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @147:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @164:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @164:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @166:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @166:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @168:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @168:34...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                           ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 309  valid: 309  (309 from cache) invalid: 0    unknown: 0    time:   4.194[0m ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 59   valid: 59   (0 from cache) invalid: 0    unknown: 0    time:  73.591[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 86600 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m] Cache hit: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @59:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @59:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @59:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @59:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @60:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @60:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @57:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @57:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @57:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @57:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @222:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @222:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @222:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @222:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @224:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @224:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @224:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @224:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @225:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @225:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @225:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @225:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @220:79...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @220:79...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @220:51...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @220:51...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @43:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @43:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @60:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @60:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @60:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @60:45...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @52:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for lemma @52:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @32:53...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for lemma @32:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @122:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @122:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @125:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @125:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @147:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @147:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @68:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @68:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @67:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @67:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @234:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @234:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @234:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @234:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @235:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @235:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @235:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @235:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @235:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @235:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @232:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @232:65...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @193:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @193:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @194:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @194:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @199:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @199:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @199:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @199:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @199:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @199:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @199:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @199:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @199:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @199:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @199:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @199:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @200:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @200:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @201:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @201:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @201:18...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @201:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @201:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @201:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @202:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @202:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @202:10...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @202:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @202:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @202:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @202:38...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @202:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @203:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @203:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @205:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @205:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @205:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @205:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @205:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @205:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @205:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @205:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @206:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @206:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @206:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @206:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @206:28...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @206:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @191:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @191:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @191:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @191:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @196:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @196:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @198:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @198:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @200:9...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @200:9...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @201:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @201:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @141:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @141:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @141:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @141:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @141:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @141:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @141:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @141:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @141:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @141:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @141:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @141:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @139:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @139:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @139:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @139:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @139:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @139:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @141:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @141:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @147:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @147:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @147:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @147:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @145:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @145:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @145:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @145:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @43:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @43:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @31:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @31:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @29:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @29:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @29:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @29:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @31:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @31:27...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @164:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @164:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @166:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @166:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @168:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @168:34...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @64:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @64:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @63:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @63:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @47:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @47:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @78:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @75:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @239:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @239:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @244:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @245:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @245:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @245:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @245:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @245:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @245:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @245:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @245:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @245:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @245:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @246:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @246:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @246:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @246:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @246:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @246:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @237:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @237:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @241:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @241:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @255:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @255:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @255:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @255:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @253:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @253:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @253:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @253:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @60:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @60:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @65:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @65:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @65:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @65:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @66:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @66:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @66:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @66:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @68:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @68:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @68:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @68:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @64:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @64:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @66:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @66:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @70:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @70:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @62:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @62:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @62:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @62:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @121:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @121:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @128:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @128:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @128:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @128:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @128:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @128:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @128:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @129:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @129:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @129:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @129:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @130:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @130:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @130:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @130:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @130:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @130:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @130:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @130:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @131:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @131:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @131:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @131:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @131:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @131:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @132:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @132:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @119:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @119:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @123:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @123:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @116:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @116:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @116:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @116:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @114:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @114:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @114:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @114:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @53:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @53:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @46:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @55:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @55:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @52:73...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @52:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @218:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @218:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @218:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @218:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @215:76...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @215:76...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @73:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @73:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @70:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @70:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @319:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @319:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @319:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @319:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @320:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @320:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @317:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @317:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @301:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @301:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @301:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @301:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @301:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @301:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @301:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @301:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @306:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @306:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @306:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @306:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @308:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @308:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @308:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @308:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @308:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @309:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @309:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @309:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @309:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @309:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @309:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @310:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @310:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @310:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @310:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @310:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @310:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @310:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @310:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @311:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @311:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @311:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @311:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @311:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @311:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @312:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @312:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @312:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @312:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @305:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @305:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @299:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @299:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @303:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @303:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @294:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @294:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @294:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @294:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @296:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @296:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @296:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @296:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @296:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @296:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @296:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @296:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @296:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @296:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @296:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @296:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @294:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @294:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @292:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @292:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @292:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @292:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @262:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @262:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @262:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @262:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @265:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @265:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @275:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @275:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @280:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @280:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @280:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @280:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @280:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @280:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @280:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @280:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @280:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @280:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @281:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @281:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @281:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @281:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @281:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @281:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @281:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @281:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @281:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @281:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @282:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @282:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @282:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @282:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @282:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @282:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @273:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @273:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @277:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @277:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @85:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @85:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @90:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @90:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @90:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @90:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @91:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @91:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @91:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @91:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @93:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @93:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @93:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @93:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @89:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @89:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @91:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @91:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @95:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @95:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @87:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @87:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @87:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @87:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @161:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @161:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @168:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @168:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @168:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @168:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @168:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @168:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @168:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @169:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @169:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @169:32...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @169:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @170:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @170:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @170:12...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @170:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @170:48...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @170:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @170:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @170:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @171:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @171:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @171:11...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @171:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @171:61...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @171:61...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @159:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @159:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @163:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @163:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @156:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @156:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @154:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @154:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @154:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @154:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @79:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @79:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @75:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @75:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @45:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @45:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @45:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @39:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @39:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @41:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @41:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @37:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @37:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @105:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @105:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                           ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 308  valid: 308  (308 from cache) invalid: 0    unknown: 0    time:   3.396[0m ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 57   valid: 57   (0 from cache) invalid: 0    unknown: 0    time:  61.054[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 68462 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
