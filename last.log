[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for unapply @205:40...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for unapply @205:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for detIsDeterministic @41:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for detIsDeterministic @41:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for detIsDeterministic @41:41...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for detIsDeterministic @41:41:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call tailNotContains[T](l))' VC for isSet @20:9...
[[34m  Info  [0m]  - Result for 'precond. (call tailNotContains[T](l))' VC for isSet @20:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @20:31...
[[34m  Info  [0m]  - Result for 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @20:31:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @21:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @21:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @21:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @21:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @21:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @21:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @21:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subCons[T](xs, x))' VC for isSet @21:42...
[[34m  Info  [0m]  - Result for 'precond. (call subCons[T](xs, x))' VC for isSet @21:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:12...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @25:42...
[[34m  Info  [0m]  - Result for 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @25:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m]  - Result for 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for isSet @17:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for isSet @17:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for isSet @17:12...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for isSet @17:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for tailNotContains @45:49...
[[34m  Info  [0m]  - Result for 'postcondition' VC for tailNotContains @45:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for tailNotContains @48:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for tailNotContains @48:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @62:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @62:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @62:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @62:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for unapply @197:52...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for unapply @197:52:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for detSound @45:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for detSound @45:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @29:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @29:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for thm3 @192:4...
[[34m  Info  [0m]  - Result for 'postcondition' VC for thm3 @192:4:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for thm1 @184:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for thm1 @184:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now solving 'postcondition' VC for thm2 @188:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for thm2 @188:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @13:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @13:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @18:34...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @18:34:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call forall[T](that, (x: T) => { ...)' VC for subsetOf @165:5...
[[34m  Info  [0m]  - Result for 'precond. (call forall[T](that, (x: T) => { ...)' VC for subsetOf @165:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call forall[T](thiss.list, p))' VC for forall @162:42...
[[34m  Info  [0m]  - Result for 'precond. (call forall[T](thiss.list, p))' VC for forall @162:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for forall @162:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for forall @162:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for det @36:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for det @36:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for move @22:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for move @22:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for move @23:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for move @23:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for empty @12:26...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for empty @12:26:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call map[Set[T], Set[T]](ps, (x$19: Set[T]) = ...)' VC for powerSet @178:15...
[[34m  Info  [0m]  - Result for 'precond. (call map[Set[T], Set[T]](ps, (x$19: Set[T]) = ...)' VC for powerSet @178:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for powerSet @175:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for powerSet @175:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call map[T, U](thiss.list, f))' VC for map @172:39...
[[34m  Info  [0m]  - Result for 'precond. (call map[T, U](thiss.list, f))' VC for map @172:39:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for map @172:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for map @172:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'body assertion' VC for set @35:39...
[[34m  Info  [0m]  - Result for 'body assertion' VC for set @35:39:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for set @37:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for set @37:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @125:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @125:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @125:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @125:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @125:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @125:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @125:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @126:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @126:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @127:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @127:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @128:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @128:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @129:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @129:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @130:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @130:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for uniqueIdem @120:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for uniqueIdem @120:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for uniqueIdem @122:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for uniqueIdem @122:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @90:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @90:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @91:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @91:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @92:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @92:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @93:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @93:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @94:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @94:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @95:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @95:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @95:43...
[[34m  Info  [0m]  - Result for 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @95:43:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @96:45...
[[34m  Info  [0m]  - Result for 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @96:45:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @99:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @99:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @100:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @100:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @101:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @101:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @102:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @102:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @103:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @103:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @104:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @104:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @105:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @105:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subUniqueComm @84:6...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subUniqueComm @84:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for subUniqueComm @86:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for subUniqueComm @86:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @76:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @76:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @76:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @76:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @56:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @56:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @56:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @56:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @69:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @69:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @69:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @69:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @113:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @113:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @113:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @113:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                           ║
[[34m  Info  [0m] ║ [32mdet[0m                 [32madt invariant[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mAutomaton.scala:36:5[0m   [32m0.610[0m  ║
[[34m  Info  [0m] ║ [33mdetIsDeterministic[0m  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:41:5[0m   [33m10.182[0m ║
[[34m  Info  [0m] ║ [32mdetIsDeterministic[0m  [32mlambda precondition[0m                                           [32mvalid[0m    [32mnativez3[0m  [32mAutomaton.scala:41:41[0m  [32m0.676[0m  ║
[[34m  Info  [0m] ║ [33mdetSound[0m            [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:45:5[0m   [33m10.030[0m ║
[[34m  Info  [0m] ║ [32mempty[0m               [32madt invariant[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:12:26[0m        [32m0.600[0m  ║
[[34m  Info  [0m] ║ [32mforall[0m              [32mlambda precondition[0m                                           [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:162:14[0m       [32m0.011[0m  ║
[[34m  Info  [0m] ║ [32mforall[0m              [32mprecond. (call forall[T](thiss.list, p))[0m                      [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:162:42[0m       [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                 [32mlambda precondition[0m                                           [32mvalid[0m    [32mnativez3[0m  [32mAutomaton.scala:13:1[0m   [32m0.007[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                 [32mlambda precondition[0m                                           [32mvalid[0m    [32mnativez3[0m  [32mAutomaton.scala:18:34[0m  [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mpostcondition[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:17:5[0m         [32m1.050[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:17:12[0m        [32m0.012[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call tailNotContains[T](l))[0m                         [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:20:9[0m         [32m0.606[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call uniqueNotContains[T](xs, x))[0m                   [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:20:31[0m        [32m0.038[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:11[0m        [32m0.032[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:11[0m        [32m0.650[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:11[0m        [32m0.722[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:11[0m        [32m1.411[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:11[0m        [32m0.844[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:11[0m        [32m1.030[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:11[0m        [32m1.718[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call subCons[T](xs, x))[0m                             [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:21:42[0m        [32m0.035[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:22:11[0m        [32m0.542[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:24:11[0m        [32m0.034[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:26:11[0m        [32m0.033[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m               [32mprecond. (call subId[T](unique[T](xs), x))[0m                    [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:26:42[0m        [32m0.042[0m  ║
[[34m  Info  [0m] ║ [32mmap[0m                 [32mlambda precondition[0m                                           [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:172:14[0m       [32m0.009[0m  ║
[[34m  Info  [0m] ║ [32mmap[0m                 [32mprecond. (call map[T, U](thiss.list, f))[0m                      [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:172:39[0m       [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32mmove[0m                [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mAutomaton.scala:22:5[0m   [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32mmove[0m                [32mlambda precondition[0m                                           [32mvalid[0m    [32mnativez3[0m  [32mAutomaton.scala:23:24[0m  [32m0.029[0m  ║
[[34m  Info  [0m] ║ [32mpowerSet[0m            [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:175:5[0m        [32m0.007[0m  ║
[[34m  Info  [0m] ║ [32mpowerSet[0m            [32mprecond. (call map[Set[T], Set[T]](ps, (x$19: Set[T]) = ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:178:15[0m       [32m0.013[0m  ║
[[34m  Info  [0m] ║ [32mrun[0m                 [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mAutomaton.scala:29:5[0m   [32m0.009[0m  ║
[[34m  Info  [0m] ║ [32mset[0m                 [32mbody assertion[0m                                                [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:35:39[0m        [32m0.483[0m  ║
[[34m  Info  [0m] ║ [32mset[0m                 [32madt invariant[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:37:5[0m         [32m4.811[0m  ║
[[34m  Info  [0m] ║ [32msubComm[0m             [32mpostcond. (ind. on xs: List[T] / Cons)[0m                        [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:69:3[0m         [32m0.030[0m  ║
[[34m  Info  [0m] ║ [32msubComm[0m             [32mpostcond. (ind. on xs: List[T] / Nil)[0m                         [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:69:3[0m         [32m0.018[0m  ║
[[34m  Info  [0m] ║ [32msubCons[0m             [32mpostcond. (ind. on xs: List[T] / Cons)[0m                        [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:62:3[0m         [32m0.039[0m  ║
[[34m  Info  [0m] ║ [32msubCons[0m             [32mpostcond. (ind. on xs: List[T] / Nil)[0m                         [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:62:3[0m         [32m0.031[0m  ║
[[34m  Info  [0m] ║ [32msubId[0m               [32mpostcond. (ind. on xs: List[T] / Cons)[0m                        [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:76:3[0m         [32m0.027[0m  ║
[[34m  Info  [0m] ║ [32msubId[0m               [32mpostcond. (ind. on xs: List[T] / Nil)[0m                         [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:76:3[0m         [32m0.020[0m  ║
[[34m  Info  [0m] ║ [32msubIdem[0m             [32mpostcond. (ind. on xs: List[T] / Cons)[0m                        [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:113:3[0m        [32m0.019[0m  ║
[[34m  Info  [0m] ║ [32msubIdem[0m             [32mpostcond. (ind. on xs: List[T] / Nil)[0m                         [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:113:3[0m        [32m0.016[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mpostcondition[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:84:6[0m         [32m13.607[0m ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:86:5[0m         [32m0.025[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:89:9[0m         [32m0.097[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:89:9[0m         [32m6.413[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:89:9[0m         [32m0.211[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:89:9[0m         [32m5.633[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:89:9[0m         [32m6.478[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:89:9[0m         [32m6.054[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:89:9[0m         [32m6.897[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:91:9[0m         [32m0.037[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:92:9[0m         [32m4.891[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:94:10[0m        [32m0.033[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:95:10[0m        [32m0.042[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call uniqueNotContains[T](-[T](xs, x), x))[0m          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:95:43[0m        [32m0.040[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call subId[T](unique[T](-[T](xs, x)), x))[0m           [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:96:45[0m        [32m0.044[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:99:10[0m        [32m0.092[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:99:10[0m        [32m5.633[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:99:10[0m        [32m6.892[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:99:10[0m        [32m6.400[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:99:10[0m        [32m0.193[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:99:10[0m        [32m5.838[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:99:10[0m        [32m7.313[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:102:9[0m        [32m5.372[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:103:9[0m        [32m0.039[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m       [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:105:9[0m        [32m0.029[0m  ║
[[34m  Info  [0m] ║ [32msubsetOf[0m            [32mprecond. (call forall[T](that, (x: T) => { ...)[0m               [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:165:5[0m        [32m0.007[0m  ║
[[34m  Info  [0m] ║ [32mtailNotContains[0m     [32mpostcondition[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:45:49[0m        [32m0.574[0m  ║
[[34m  Info  [0m] ║ [32mtailNotContains[0m     [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:48:5[0m         [32m0.534[0m  ║
[[34m  Info  [0m] ║ [33mthm1[0m                [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mSet.scala:184:5[0m        [33m12.450[0m ║
[[34m  Info  [0m] ║ [33mthm2[0m                [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mSet.scala:188:5[0m        [33m10.033[0m ║
[[34m  Info  [0m] ║ [32mthm3[0m                [32mpostcondition[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:192:4[0m        [32m0.048[0m  ║
[[34m  Info  [0m] ║ [32munapply[0m             [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:197:52[0m       [32m0.005[0m  ║
[[34m  Info  [0m] ║ [32munapply[0m             [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:205:40[0m       [32m0.140[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mpostcondition[0m                                                 [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:120:5[0m        [32m4.730[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mmatch exhaustiveness[0m                                          [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:122:5[0m        [32m0.013[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:125:9[0m        [32m0.084[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:125:9[0m        [32m5.026[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:125:9[0m        [32m4.872[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:125:9[0m        [32m5.578[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:125:9[0m        [32m4.100[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m  [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:125:9[0m        [32m5.855[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:127:9[0m        [32m3.834[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:128:9[0m        [32m0.472[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:129:9[0m        [32m0.019[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m          [32mprecond. (call ==|[List[T]]({ ...)[0m                            [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:130:9[0m        [32m0.012[0m  ║
[[34m  Info  [0m] ║ [32muniqueNotContains[0m   [32mpostcond. (ind. on xs: List[T] / Cons)[0m                        [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:56:3[0m         [32m0.036[0m  ║
[[34m  Info  [0m] ║ [32muniqueNotContains[0m   [32mpostcond. (ind. on xs: List[T] / Nil)[0m                         [32mvalid[0m    [32mnativez3[0m  [32mSet.scala:56:3[0m         [32m0.015[0m  ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 89   valid: 85   (0 from cache) invalid: 0    unknown: 4    time: 183.254[0m                                                   ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 190500 ms
[[34m  Info  [0m] Shutting down executor service.
