[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @240:21...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @240:21...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @240:21...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @240:21:
[[33mWarning [0m]  => INVALID
[[33mWarning [0m] Found counter-example:
[[33mWarning [0m]   set1: USet[T]     -> USNil[T]()
[[33mWarning [0m]   p: (T) => Boolean -> (x$136: T) => if (x$136 == T#1) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else if (x$136 == T#0) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else if (true) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else {
[[33mWarning [0m]     true
[[33mWarning [0m]   }
[[33mWarning [0m]   set2: USet[T]     -> USNil[T]()
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @240:52...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @240:52...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @240:52...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @240:52:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞══════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                              ║
[[34m  Info  [0m] ║ [31meqExists[0m  [31mprecond. (call subsetExists[T](set1, set2, p))[0m  [31minvalid[0m  [31mnativez3[0m  [31mUSet.scala:240:21[0m  [31m0.552[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 6    valid: 5    (3 from cache) invalid: 1    unknown: 0    time:   1.818[0m                      ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 9943 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @241:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for eqExists @241:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for eqExists @241:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for eqExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24:
[[33mWarning [0m]  => INVALID
[[33mWarning [0m] Found counter-example:
[[33mWarning [0m]   p: (T) => Boolean -> (x$471: T) => if (x$471 == T#0) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else if (x$471 == T#1) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else if (true) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else {
[[33mWarning [0m]     true
[[33mWarning [0m]   }
[[33mWarning [0m]   set2: USet[T]     -> USNil[T]()
[[33mWarning [0m]   set1: USet[T]     -> USNil[T]()
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @242:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @242:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞══════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                              ║
[[34m  Info  [0m] ║ [31meqExists[0m  [31mprecond. (call subsetExists[T](set1, set2, p))[0m  [31minvalid[0m  [31mnativez3[0m  [31mUSet.scala:241:24[0m  [31m0.149[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 9    valid: 8    (4 from cache) invalid: 1    unknown: 0    time:   1.701[0m                      ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 4733 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for eqExists @239:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for eqExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for eqExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @241:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for eqExists @241:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for eqExists @241:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for eqExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:24:
[[33mWarning [0m]  => INVALID
[[33mWarning [0m] Found counter-example:
[[33mWarning [0m]   set1: USet[T]     -> USNil[T]()
[[33mWarning [0m]   set2: USet[T]     -> USNil[T]()
[[33mWarning [0m]   p: (T) => Boolean -> (x$778: T) => if (x$778 == T#0) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else if (true) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else {
[[33mWarning [0m]     true
[[33mWarning [0m]   }
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @242:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @242:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞══════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                              ║
[[34m  Info  [0m] ║ [31meqExists[0m  [31mprecond. (call subsetExists[T](set1, set2, p))[0m  [31minvalid[0m  [31mnativez3[0m  [31mUSet.scala:241:24[0m  [31m0.077[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 9    valid: 8    (3 from cache) invalid: 1    unknown: 0    time:   1.439[0m                      ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2930 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @243:17...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @243:17...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @243:17...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @243:17:
[[33mWarning [0m]  => INVALID
[[33mWarning [0m] Found counter-example:
[[33mWarning [0m]   set2: USet[T]     -> USCons[T](T#0, USNil[T]())
[[33mWarning [0m]   p: (T) => Boolean -> (x$967: T) => if (x$967 == T#0) {
[[33mWarning [0m]     false
[[33mWarning [0m]   } else if (x$967 == T#1) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else if (true) {
[[33mWarning [0m]     false
[[33mWarning [0m]   } else {
[[33mWarning [0m]     false
[[33mWarning [0m]   }
[[33mWarning [0m]   set1: USet[T]     -> USCons[T](T#0, USNil[T]())
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for eqExists @241:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for eqExists @241:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for eqExists @241:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for eqExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞══════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                              ║
[[34m  Info  [0m] ║ [31meqExists[0m  [31mprecond. (call subsetExists[T](set1, set2, p))[0m  [31minvalid[0m  [31mnativez3[0m  [31mUSet.scala:243:17[0m  [31m0.089[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 6    valid: 5    (3 from cache) invalid: 1    unknown: 0    time:   0.749[0m                      ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2708 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @244:13...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for eqExists @244:13...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for eqExists @244:13...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for eqExists @244:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @244:29...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @244:29...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @244:29...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @244:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:14...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:14...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:14...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:14:
[[33mWarning [0m]  => INVALID
[[33mWarning [0m] Found counter-example:
[[33mWarning [0m]   set2: USet[T]     -> USCons[T](T#0, USNil[T]())
[[33mWarning [0m]   p: (T) => Boolean -> (x$1185: T) => if (x$1185 == T#1) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else if (x$1185 == T#0) {
[[33mWarning [0m]     false
[[33mWarning [0m]   } else if (true) {
[[33mWarning [0m]     true
[[33mWarning [0m]   } else {
[[33mWarning [0m]     true
[[33mWarning [0m]   }
[[33mWarning [0m]   set1: USet[T]     -> USCons[T](T#0, USNil[T]())
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for eqExists @241:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for eqExists @241:5...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞══════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                              ║
[[34m  Info  [0m] ║ [31meqExists[0m  [31mprecond. (call subsetExists[T](set2, set1, p))[0m  [31minvalid[0m  [31mnativez3[0m  [31mUSet.scala:245:14[0m  [31m0.082[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 8    valid: 7    (4 from cache) invalid: 1    unknown: 0    time:   0.691[0m                      ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2695 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @244:13...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @244:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @244:29...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @244:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @245:18...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set2, p))' VC for eqExists @245:18...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set2, p))' VC for eqExists @245:18...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set2, p))' VC for eqExists @245:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:34...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:34...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:34...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @245:34:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for eqExists @241:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for eqExists @241:5...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 9    valid: 9    (6 from cache) invalid: 0    unknown: 0    time:   1.406[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2872 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:25...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:25...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:25...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set2, p))' VC for eqExists @242:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 8    valid: 8    (4 from cache) invalid: 0    unknown: 0    time:   0.494[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 1811 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @237:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 8    valid: 8    (7 from cache) invalid: 0    unknown: 0    time:   0.345[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 1583 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[33mWarning [0m] Interrupted...
[[34m  Info  [0m] Shutting down executor service.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         [[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m15.574[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m18.241[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  34.130[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 35483 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m15.841[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m15.945[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  32.160[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 35978 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m16.572[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m16.906[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  33.793[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 34910 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m15.585[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m15.629[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  31.550[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 32704 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m15.797[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m15.586[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  31.793[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 33149 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m15.736[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m15.681[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  31.975[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 33162 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m15.531[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m15.716[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  31.898[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 32999 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/USet.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @74:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                           [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m15.692[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call |[Boolean, Boolean](==|[Boolean]({ ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:73:7[0m  [33m15.655[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 10   valid: 8    (8 from cache) invalid: 0    unknown: 2    time:  31.665[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 32911 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Set.scala
[[31m Error  [0m] Set.scala:102:37: error: not enough arguments for method eqExists: (set1: uset.USet[T], set2: uset.USet[T], p: T => Boolean)Boolean.
[[31m Error  [0m] Unspecified value parameter p.
             }.holds because USetSpecs.eqExists(set1.uset, set2.uset)
                                               [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 571 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Set.scala:102:37: error: not enough arguments for method eqExists: (set1: uset.USet[T], set2: uset.USet[T], p: T => Boolean)Boolean.
[[31m Error  [0m] Unspecified value parameter p.
             }.holds because USetSpecs.eqExists(set1.uset, set2.uset)
                                               [31m^[0m
[[31m Error  [0m] Automaton.scala:74:42: error: not enough arguments for method eqExists: (set1: uset.USet[T], set2: uset.USet[T], p: T => Boolean)Boolean.
[[31m Error  [0m] Unspecified value parameter p.
                 (lemma(nfa, init, word) && eqExists(nfa.run(init, word), dfa.run(init, word))) |
                                                    [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 706 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Set.scala:102:37: error: not enough arguments for method eqExists: (set1: uset.USet[T], set2: uset.USet[T], p: T => Boolean)Boolean.
[[31m Error  [0m] Unspecified value parameter p.
             }.holds because USetSpecs.eqExists(set1.uset, set2.uset)
                                               [31m^[0m
[[31m Error  [0m] Automaton.scala:74:50: error: type mismatch;
[[31m Error  [0m]  found   : set.Set[State]
[[31m Error  [0m]  required: uset.USet[?]
                 (lemma(nfa, init, word) && eqExists(nfa.run(init, word), dfa.run(init, word), nfa.isFinal)) |
                                                            [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 599 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Set.scala:102:37: error: not enough arguments for method eqExists: (set1: uset.USet[T], set2: uset.USet[T], p: T => Boolean)Boolean.
[[31m Error  [0m] Unspecified value parameter p.
             }.holds because USetSpecs.eqExists(set1.uset, set2.uset)
                                               [31m^[0m
[[31m Error  [0m] Automaton.scala:74:50: error: type mismatch;
[[31m Error  [0m]  found   : set.Set[State]
[[31m Error  [0m]  required: uset.USet[?]
                 (lemma(nfa, init, word) && eqExists(nfa.run(init, word),
                                                            [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 585 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Set.scala
[[31m Error  [0m] Set.scala:102:43: error: value uset is not a member of uset.USet[T]
             }.holds because USetSpecs.eqExists(set1.uset, set2.uset, p)
                                                     [31m^[0m
[[31m Error  [0m] Set.scala:102:54: error: value uset is not a member of uset.USet[T]
             }.holds because USetSpecs.eqExists(set1.uset, set2.uset, p)
                                                                [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 629 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Set.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @73:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @73:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @74:8...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @74:8...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @74:34...
[[34m  Info  [0m] Cache miss: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @74:34...
[[34m  Info  [0m]  - Now solving 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @74:34...
[[34m  Info  [0m]  - Result for 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @74:34:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @74:43...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @74:43...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @74:43...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @74:43:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @77:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @77:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 12   valid: 12   (7 from cache) invalid: 0    unknown: 0    time:   3.271[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 4369 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31...
[[34m  Info  [0m] Cache hit: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 7    valid: 7    (6 from cache) invalid: 0    unknown: 0    time:   0.828[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 1907 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5...
[[34m  Info  [0m] 
[[33mWarning [0m] Interrupted...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5:
[[33mWarning [0m]  => CANCELLED
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31...
[[34m  Info  [0m] Cache miss: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31...
[[34m  Info  [0m]  - Now solving 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31...
[[34m  Info  [0m]  - Result for 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞══════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                          ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call lemma[State, Sym](nfa, init, word))[0m  [33mcancelled[0m  [33mnativez3[0m  [33mAutomaton.scala:72:5[0m  [33m5.293[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 5    valid: 4    (1 from cache) invalid: 0    unknown: 1    time:   6.936[0m                                  ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 8017 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31...
[[34m  Info  [0m] Cache hit: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @72:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:40...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 7    valid: 7    (7 from cache) invalid: 0    unknown: 0    time:   0.295[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 1459 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, init))' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, init))' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, init))' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, init))' VC for dfaNfaEquiv @68:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for dfaNfaEquiv @70:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, init))' VC for dfaNfaEquiv @70:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, init))' VC for dfaNfaEquiv @70:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, init))' VC for dfaNfaEquiv @70:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, init))' VC for dfaNfaEquiv @70:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache miss: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Now solving 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Result for 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @68:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] 
[[33mWarning [0m] Interrupted...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[33mWarning [0m]  => CANCELLED
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                     ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mpostcondition[0m                                                 [33mcancelled[0m  [33mnativez3[0m  [33mAutomaton.scala:65:5[0m  [33m6.856[0m  ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m  [33mprecond. (call eqExists[State](run[State, Sym](nfa, ini ...)[0m  [33mtimeout[0m    [33mnativez3[0m  [33mAutomaton.scala:71:7[0m  [33m15.866[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 7    valid: 5    (0 from cache) invalid: 0    unknown: 2    time:  24.186[0m                                             ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 25275 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache miss: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Now solving 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Result for 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 7    valid: 7    (4 from cache) invalid: 0    unknown: 0    time:   1.588[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2657 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
