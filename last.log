[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @139:52...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @139:52...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @126:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @126:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @126:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @126:10:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @132:15...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @132:15...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @132:15...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @132:15:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @127:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @127:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @127:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @127:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @123:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for epsClosure @123:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for epsClosure @123:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for epsClosure @123:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @104:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @104:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @105:24...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for move @105:24...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for move @105:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for move @105:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @93:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @93:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @100:44...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @100:44...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @100:44...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @100:44:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @95:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @95:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss.list, p))' VC for forall @90:42...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss.list, p))' VC for forall @90:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forall @90:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forall @90:14...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for set @36:39...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for set @36:39...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m] Cache hit: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                    ║
[[34m  Info  [0m] ║ [33maccepts[0m     [33mprecond. (call epsClosure[State, Sym](thiss, set[State] ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:136:17[0m  [33m10.137[0m ║
[[34m  Info  [0m] ║ [33mepsClosed[0m   [33mprecond. (call epsClosure[State, Sym](thiss, states))[0m         [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:132:15[0m  [33m10.185[0m ║
[[34m  Info  [0m] ║ [33mepsClosure[0m  [33mbody assertion: Measure not guaranteed positive[0m               [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:123:5[0m   [33m10.436[0m ║
[[34m  Info  [0m] ║ [33mepsClosure[0m  [33mprecond. (call epsClosure[State, Sym](thiss, newStates))[0m      [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:126:10[0m  [33m10.520[0m ║
[[34m  Info  [0m] ║ [33mrun[0m         [33mprecond. (call epsClosure[State, Sym](thiss, states))[0m         [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:112:21[0m  [33m10.179[0m ║
[[34m  Info  [0m] ║ [33mrun[0m         [33mprecond. (call epsClosure[State, Sym](thiss, newStates))[0m      [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:115:13[0m  [33m10.292[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 128  valid: 122  (80 from cache) invalid: 0    unknown: 6    time:  66.797[0m                                           ║
[[34m  Info  [0m] ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 40343 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:100:78: error: missing argument list for method && in class Boolean
[[31m Error  [0m] Unapplied methods are only converted to functions when a function type is expected.
[[31m Error  [0m] You can make this conversion explicit by writing `$amp$amp _` or `$amp$amp(_)` instead of `$amp$amp`.
               forall { (s: State, w: Option[Sym]) => move(s, w) subsetOf validStates } &&
                                                                                        [31m^[0m
[[31m Error  [0m] Automaton.scala:108:16: error: missing parameter type
             } ensuring { res => res subsetOf validStates }
                          [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 1431 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:101:78: error: missing argument list for method && in class Boolean
[[31m Error  [0m] Unapplied methods are only converted to functions when a function type is expected.
[[31m Error  [0m] You can make this conversion explicit by writing `$amp$amp _` or `$amp$amp(_)` instead of `$amp$amp`.
               forall { (s: State, w: Option[Sym]) => move(s, w) subsetOf validStates } &&
                                                                                        [31m^[0m
[[31m Error  [0m] Automaton.scala:109:16: error: missing parameter type
             } ensuring { res => res subsetOf validStates }
                          [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 1498 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
