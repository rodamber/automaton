[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @341:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @341:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @341:17...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @341:17...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @339:73:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @336:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @336:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @336:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @336:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @337:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @337:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @334:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @334:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @230:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @230:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @230:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @230:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqTrans @227:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqTrans @227:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @318:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @318:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @318:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @318:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @323:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @323:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @323:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @323:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @327:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @327:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @328:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @328:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @328:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @328:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @329:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @329:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @329:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @329:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @322:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @322:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @316:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @316:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @320:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @320:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @311:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @311:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @311:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @311:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @311:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @311:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @309:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @309:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @309:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @309:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @279:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @279:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @279:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @279:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @282:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @282:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqSymm @232:58...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqSymm @232:58...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqRefl @224:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqRefl @224:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @201:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @201:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @202:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @202:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @208:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @208:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @209:20...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @209:20...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @209:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @209:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @210:12...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @210:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @210:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @210:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @210:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @210:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @214:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @214:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @214:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @214:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @214:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @214:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @215:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @215:11...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @199:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @199:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @199:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @199:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @204:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @204:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @206:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @206:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @208:11...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @208:11...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @209:12...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @209:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for addExists @150:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @292:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @292:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @298:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @298:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @298:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @298:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @298:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @298:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @298:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @298:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @298:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @298:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @299:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @299:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @299:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @299:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @290:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @290:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @294:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @294:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @252:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @252:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @249:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @249:65...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @256:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @256:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @262:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @262:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @263:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @263:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @263:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @263:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @254:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @254:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @258:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @258:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetRefl @191:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @194:78...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTrans @194:78...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTrans @194:78...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTrans @194:78:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @272:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @272:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @272:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @272:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @270:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @270:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @270:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @270:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @108:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @108:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19...
[[34m  Info  [0m]  - Result for 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @77:75...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTrans @77:75...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTrans @77:75...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTrans @77:75:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for - @59:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for - @59:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqSymm[T](set1.uset, set2.uset))' VC for eqSymm @97:19...
[[34m  Info  [0m] Cache miss: 'precond. (call eqSymm[T](set1.uset, set2.uset))' VC for eqSymm @97:19...
[[34m  Info  [0m]  - Now solving 'precond. (call eqSymm[T](set1.uset, set2.uset))' VC for eqSymm @97:19...
[[34m  Info  [0m]  - Result for 'precond. (call eqSymm[T](set1.uset, set2.uset))' VC for eqSymm @97:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqSymm @94:56...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqSymm @94:56...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqSymm @94:56...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqSymm @94:56:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqRefl @86:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqRefl @86:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqRefl @86:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqRefl @86:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @74:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetRefl @74:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetRefl @74:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetRefl @74:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @92:19...
[[34m  Info  [0m] Cache miss: 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @92:19...
[[34m  Info  [0m]  - Now solving 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @92:19...
[[34m  Info  [0m]  - Result for 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @92:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqTrans @89:71...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqTrans @89:71...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqTrans @89:71...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqTrans @89:71:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @101:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for eqExists @101:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for eqExists @101:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for eqExists @101:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @101:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @101:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @102:19...
[[34m  Info  [0m] Cache miss: 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @102:19...
[[34m  Info  [0m]  - Now solving 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @102:19...
[[34m  Info  [0m]  - Result for 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @102:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @99:75...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqExists @99:75...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqExists @99:75...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqExists @99:75:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @99:47...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @99:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @112:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @112:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetIsSmallerOrEqual @118:72:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for + @52:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for + @52:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @123:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @123:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache hit: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @34:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @34:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:10...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @43:14...
[[34m  Info  [0m] Cache hit: 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @43:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @43:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @43:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @50:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @50:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @51:16...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @51:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:43...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:12...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @56:14...
[[34m  Info  [0m] Cache hit: 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @56:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:22...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @59:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @59:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:35...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:35...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:43...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:43...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @89:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @89:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @104:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @104:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @155:15...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @155:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @48:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @27:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @82:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @82:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @84:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @84:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @179:5...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @179:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @179:31...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @179:31...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @179:31...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @179:31:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @179:46...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @179:46...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosureIdem @177:69...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosureIdem @177:69...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosureIdem @177:69...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosureIdem @177:69:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @159:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @159:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @118:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @118:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @122:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @122:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @121:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @121:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @124:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @124:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @124:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @124:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @117:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @117:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @146:14...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @146:14...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @146:14...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @146:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @129:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @129:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @129:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @129:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @130:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @130:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @130:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @130:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @137:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @138:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @138:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @138:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @138:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @139:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @139:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @139:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @139:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @143:12...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @143:12...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @143:12...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @143:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @145:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @145:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @145:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @146:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @146:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @146:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @146:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @147:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @147:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @147:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @147:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @151:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @132:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for epsClosure @132:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for epsClosure @132:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for epsClosure @132:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @168:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @168:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @170:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @170:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @172:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @172:34...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @109:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @109:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @110:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @110:24...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                     ║
[[34m  Info  [0m] ║ [33mapply[0m                    [33madt invariant[0m   [33mtimeout[0m   [33mnativez3[0m  [33mAutomaton.scala:27:5[0m     [33m15.225[0m ║
[[34m  Info  [0m] ║ [33mepsClosureIdem[0m           [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mAutomaton.scala:177:69[0m   [33m15.472[0m ║
[[34m  Info  [0m] ║ [33mstrictSubsetIsSmaller[0m    [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mUSet.scala:339:73[0m        [33m15.256[0m ║
[[34m  Info  [0m] ║ [33msubsetRefl[0m               [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mUSet.scala:191:5[0m         [33m15.065[0m ║
[[34m  Info  [0m] ║ [33msubsetTrans[0m              [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mUSet.scala:194:78[0m        [33m15.055[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 347  valid: 342  (299 from cache) invalid: 0    unknown: 5    time:  83.840[0m           ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mtermination summary[0m ╞════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                                ║
[[34m  Info  [0m] ║ [33maccepts[0m               [33m✗ No guarantee[0m        [33mAutomaton.scala:158:3[0m            [33m0.000[0m     ║
[[34m  Info  [0m] ║ [33mapply[0m                 [33m✗ No guarantee[0m        [33mAutomaton.scala:18:3[0m             [33m45.061[0m    ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m           [33m✗ No guarantee[0m        [33mAutomaton.scala:64:3[0m             [33m0.000[0m     ║
[[34m  Info  [0m] ║ [33mepsClosed[0m             [33m✗ No guarantee[0m        [33mAutomaton.scala:153:3[0m            [33m0.000[0m     ║
[[34m  Info  [0m] ║ [33mepsClosure[0m            [33m✗ No guarantee[0m        [33mAutomaton.scala:126:3[0m            [33m0.000[0m     ║
[[34m  Info  [0m] ║ [33mepsClosureIdem[0m        [33m✗ No guarantee[0m        [33mAutomaton.scala:177:3[0m            [33m0.000[0m     ║
[[34m  Info  [0m] ║ [33mlemma[0m                 [33m✗ No guarantee[0m        [33mAutomaton.scala:30:3[0m             [33m0.000[0m     ║
[[34m  Info  [0m] ║ [33mrun[0m                   [33m✗ No guarantee[0m        [33mAutomaton.scala:115:3[0m            [33m0.000[0m     ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 77   valid: 69   (0 from cache) invalid: 0    unknown: 8    time:  79.072[0m       ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 172393 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @76:1...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @67:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @68:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @70:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m] Cache miss: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Now solving 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7...
[[34m  Info  [0m]  - Result for 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @71:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @68:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @68:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @65:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @65:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @32:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @34:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @34:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @34:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @34:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @43:14...
[[34m  Info  [0m] Cache miss: 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @43:14...
[[34m  Info  [0m]  - Now solving 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @43:14...
[[34m  Info  [0m]  - Result for 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @43:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @43:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @43:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @43:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @43:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @50:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @50:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @50:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @50:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @51:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @51:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @51:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @51:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @53:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @53:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:43...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:43...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:43...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @54:43:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:12...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:12...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:12...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @55:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @56:14...
[[34m  Info  [0m] Cache miss: 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @56:14...
[[34m  Info  [0m]  - Now solving 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @56:14...
[[34m  Info  [0m]  - Result for 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @56:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @56:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @57:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @58:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @59:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @59:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:35...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:35...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:35...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:35:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:43...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:43...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @50:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @50:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @51:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @31:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @31:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @38:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @89:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @89:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @97:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @104:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @104:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @92:19...
[[34m  Info  [0m] Cache hit: 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @92:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqTrans @89:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqTrans @89:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @230:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @230:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @230:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @230:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqTrans @227:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqTrans @227:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @153:15...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @153:15...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @153:15...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @153:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @101:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @101:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @101:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @101:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @102:19...
[[34m  Info  [0m] Cache hit: 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @102:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @99:75...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqExists @99:75...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @99:47...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @99:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @128:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @128:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @21:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @24:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @25:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @48:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @27:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @27:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @82:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @82:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @84:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @84:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @201:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @201:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @202:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @202:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @207:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @207:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @208:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @208:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @209:20...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @209:20...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @209:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @209:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @210:12...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @210:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @210:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @210:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @210:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @210:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @214:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @214:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @214:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @214:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @214:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @214:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @215:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @215:11...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @199:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @199:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @199:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @199:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @204:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @204:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @206:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @206:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @208:11...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @208:11...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @209:12...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @209:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @177:5...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @177:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @177:31...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @177:31...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @177:31...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @177:31:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @177:46...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @177:46...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosureIdem @175:69...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosureIdem @175:69...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosureIdem @175:69...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosureIdem @175:69:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @157:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @157:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @158:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @158:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @158:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @158:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @158:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @158:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @158:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @158:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @118:21...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @118:21...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @118:21...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @118:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @122:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @122:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @122:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @122:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @122:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @121:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @121:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @124:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @124:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @124:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @124:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @117:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @117:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @128:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @128:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @144:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @144:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @147:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @147:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @147:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @147:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @135:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @135:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @144:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @144:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @145:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @149:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @149:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @149:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @149:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @132:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @132:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @112:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @112:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @251:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @252:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @252:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @252:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @249:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @249:65...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetRefl @191:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @336:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @336:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @336:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @336:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @337:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @337:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @334:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @334:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @318:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @318:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @318:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @318:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @323:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @323:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @323:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @323:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @327:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @327:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @328:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @328:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @328:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @328:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @329:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @329:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @329:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @329:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @322:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @322:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @316:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @316:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @320:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @320:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @311:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @311:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @311:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @311:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @311:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @311:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @309:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @309:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @309:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @309:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @279:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @279:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @279:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @279:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @282:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @282:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @292:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @292:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @297:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @297:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @298:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @298:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @298:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @298:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @298:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @298:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @298:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @298:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @298:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @298:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @299:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @299:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @299:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @299:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @290:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @290:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @294:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @294:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @166:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @166:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @168:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @168:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @170:34...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @170:34...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @109:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @109:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @110:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @110:24...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @108:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @108:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @256:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @256:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @262:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @262:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @262:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @262:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @263:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @263:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @263:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @263:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @254:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @254:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @258:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @258:5...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @194:78...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTrans @194:78...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTrans @194:78...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTrans @194:78:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @272:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @272:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @272:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @272:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @270:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @270:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @270:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @270:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @123:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @123:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @341:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @341:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @341:17...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @341:17...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @339:73:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                     ║
[[34m  Info  [0m] ║ [33mapply[0m                    [33madt invariant[0m   [33mtimeout[0m   [33mnativez3[0m  [33mAutomaton.scala:27:5[0m     [33m15.205[0m ║
[[34m  Info  [0m] ║ [33mepsClosureIdem[0m           [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mAutomaton.scala:175:69[0m   [33m15.476[0m ║
[[34m  Info  [0m] ║ [33mstrictSubsetIsSmaller[0m    [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mUSet.scala:339:73[0m        [33m15.044[0m ║
[[34m  Info  [0m] ║ [33msubsetRefl[0m               [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mUSet.scala:191:5[0m         [33m15.070[0m ║
[[34m  Info  [0m] ║ [33msubsetTrans[0m              [33mpostcondition[0m   [33mtimeout[0m   [33mnativez3[0m  [33mUSet.scala:194:78[0m        [33m15.066[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 346  valid: 341  (289 from cache) invalid: 0    unknown: 5    time:  91.099[0m           ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 77   valid: 77   (0 from cache) invalid: 0    unknown: 0    time:  56.297[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 149946 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
