[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @341:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @341:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @341:17...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @341:17...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @339:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @339:73:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @336:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @336:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @336:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @336:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @337:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @337:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @334:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @334:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @230:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @230:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @230:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @230:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqTrans @227:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqTrans @227:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @239:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @239:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @241:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @241:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @242:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @242:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqExists @237:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @237:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @318:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @318:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @318:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @318:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @318:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @323:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @323:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @323:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @323:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @325:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @326:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @326:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @327:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @327:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @328:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @328:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @328:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @328:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @329:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @329:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @329:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @329:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @322:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @322:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @316:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @316:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @320:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @320:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @311:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @311:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @311:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @311:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @165:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @165:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @165:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @165:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @166:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @166:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @166:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @166:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @166:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @166:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @166:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @166:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @129:21...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @129:21...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @129:21...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @129:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @131:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @131:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @131:25...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @131:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @133:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @133:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @133:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @133:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @133:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @133:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @133:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @133:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @132:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @132:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @132:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @132:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @135:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @135:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @135:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @135:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @128:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @128:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @128:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @128:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @161:15...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @161:15...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @161:15...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @161:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @139:15...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @139:15...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @139:15...
[[34m  Info  [0m]  - Result for 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @139:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @143:13...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @143:13...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @143:13...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @143:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @153:14...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @153:14...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @153:14...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @153:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @155:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @155:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @155:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @155:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @146:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @147:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @147:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @147:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @147:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @151:12...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @151:12...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @151:12...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @151:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @153:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @153:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @153:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @153:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @157:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @157:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @157:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @157:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @143:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for epsClosure @143:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for epsClosure @143:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for epsClosure @143:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @121:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @121:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @121:25...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @121:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @118:21...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for move @118:21...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for move @118:21...
[[31m Error  [0m] Quantification (contains[State](x$680, x$651) && (isEmpty[Sym](x$654) || contains[Sym](x$682, get[Sym](x$654)))) == (x$681.move((x$651, x$654)) ≠ x$679) does not fit in supported fragment.
[[31m Error  [0m]   Reason: Can't guarantee model for complex matchers.
[[31m Error  [0m] Model obtained was:
[[31m Error  [0m]   w: Option[Sym]         -> Some[Sym](Sym#20)
[[31m Error  [0m]   states: Set[State]     -> Set[State](USCons[State](State#14, USNil[State]()))
[[31m Error  [0m]   thiss: NFA[State, Sym] -> NFA[State, Sym](Set[Sym](USNil[Sym]()), Set[State](USCons[State](State#14, USCons[State](State#9, USNil[State]()))), {(State#17, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), (State#10, Some[Sym](Sym#19)) -> Some[Set[State]](Set[State](USNil[State]())), (State#21, Some[Sym](Sym#19)) -> Some[Set[State]](Set[State](USNil[State]())), (State#14, Some[Sym](Sym#20)) -> None[Set[State]](), (State#14, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), * -> Some[Set[State]](Set[State](USNil[State]()))}, State#14, (x$700: State) => if (x$700 == State#18) {
[[31m Error  [0m]     true
[[31m Error  [0m]   } else {
[[31m Error  [0m]     true
[[31m Error  [0m]   })
[[34m  Info  [0m]  - Result for 'body assertion' VC for move @118:21:
[[33mWarning [0m]  => UNKNOWN
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @117:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for move @117:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for move @117:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for move @117:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @121:9...
[[34m  Info  [0m] Cache miss: 'map usage' VC for move @121:9...
[[34m  Info  [0m]  - Now solving 'map usage' VC for move @121:9...
[[34m  Info  [0m]  - Result for 'map usage' VC for move @121:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @121:9...
[[34m  Info  [0m] Cache miss: 'cast correctness' VC for move @121:9...
[[34m  Info  [0m]  - Now solving 'cast correctness' VC for move @121:9...
[[34m  Info  [0m]  - Result for 'cast correctness' VC for move @121:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                   ║
[[34m  Info  [0m] ║ [33mmove[0m   [33mbody assertion[0m       [33munknown[0m    [33mnativez3[0m     [33mAutomaton.scala:118:21[0m         [33m0.222[0m   ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 26   valid: 25   (0 from cache) invalid: 0    unknown: 1    time:   4.581[0m           ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 6352 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:106:19: error: type mismatch;
[[31m Error  [0m]  found   : automaton.NFA[State,Sym]
[[31m Error  [0m]  required: automaton.NFA[State,Any]
[[31m Error  [0m] Note: Sym <: Any, but class NFA is invariant in type Sym.
[[31m Error  [0m] You may wish to define Sym as +Sym instead. (SLS 4.5)
                 (validInput(this, s, w) == move.isDefinedAt((s, w))) &&
                             [31m^[0m
[[31m Error  [0m] Automaton.scala:113:54: error: type mismatch;
[[31m Error  [0m]  found   : automaton.NFA[State,Sym]
[[31m Error  [0m]  required: automaton.NFA[State,Any]
[[31m Error  [0m] Note: Sym <: Any, but class NFA is invariant in type Sym.
[[31m Error  [0m] You may wish to define Sym as +Sym instead. (SLS 4.5)
               require(states.subsetOf(validStates) && validSym(this, w))
                                                                [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 908 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:106:19: error: type mismatch;
[[31m Error  [0m]  found   : automaton.NFA[State,Sym]
[[31m Error  [0m]  required: automaton.NFA[State,Any]
[[31m Error  [0m] Note: Sym <: Any, but class NFA is invariant in type Sym.
[[31m Error  [0m] You may wish to define Sym as +Sym instead. (SLS 4.5)
                 (validInput(this, s, w) == move.isDefinedAt((s, w))) &&
                             [31m^[0m
[[31m Error  [0m] Automaton.scala:113:54: error: type mismatch;
[[31m Error  [0m]  found   : automaton.NFA[State,Sym]
[[31m Error  [0m]  required: automaton.NFA[State,Any]
[[31m Error  [0m] Note: Sym <: Any, but class NFA is invariant in type Sym.
[[31m Error  [0m] You may wish to define Sym as +Sym instead. (SLS 4.5)
               require(states.subsetOf(validStates) && validSym(this, w))
                                                                [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 845 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:117:26: error: not enough arguments for method validInput: (nfa: automaton.NFA[S,W], s: S, w: W)Boolean.
[[31m Error  [0m] Unspecified value parameter w.
                   assert(validInput(x, w))
                                    [31m^[0m
[[31m Error  [0m] Automaton.scala:176:7: error: value isEmpty is not a member of type parameter W
               w.isEmpty || nfa.alphabet.contains(w.get)
                 [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 746 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:176:7: error: value isEmpty is not a member of type parameter W
               w.isEmpty || nfa.alphabet.contains(w.get)
                 [31m^[0m
[[31m Error  [0m] Automaton.scala:176:42: error: value get is not a member of type parameter W
               w.isEmpty || nfa.alphabet.contains(w.get)
                                                    [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 711 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[31m Error  [0m] Quantification validInput[State, Sym](x$958, x$931, x$934) == (x$957.move((x$931, x$934)) ≠ x$959) does not fit in supported fragment.
[[31m Error  [0m]   Reason: Can't guarantee model for complex matchers.
[[31m Error  [0m] Model obtained was:
[[31m Error  [0m]   word: List[Sym]        -> Cons[Sym](Sym#0, Nil[Sym]())
[[31m Error  [0m]   thiss: NFA[State, Sym] -> NFA[State, Sym](Set[Sym](USCons[Sym](Sym#42, USNil[Sym]())), Set[State](USCons[State](State#25, USCons[State](State#16, USCons[State](State#26, USNil[State]())))), {(State#25, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), (State#33, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), (State#27, Some[Sym](Sym#31)) -> Some[Set[State]](Set[State](USNil[State]())), (State#18, Some[Sym](Sym#30)) -> None[Set[State]](), * -> Some[Set[State]](Set[State](USNil[State]()))}, State#25, (x$976: State) => if (x$976 == State#28) {
[[31m Error  [0m]     true
[[31m Error  [0m]   } else {
[[31m Error  [0m]     true
[[31m Error  [0m]   })
[[31m Error  [0m]   states: Set[State]     -> Set[State](USNil[State]())
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25:
[[33mWarning [0m]  => UNKNOWN
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @130:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @130:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @133:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @133:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @126:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15...
[[34m  Info  [0m]  - Result for 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @144:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @145:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @149:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @151:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @155:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @116:21...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for move @116:21...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for move @116:21...
[[34m  Info  [0m]  - Result for 'body assertion' VC for move @116:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for move @115:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @119:9...
[[34m  Info  [0m] Cache miss: 'map usage' VC for move @119:9...
[[34m  Info  [0m]  - Now solving 'map usage' VC for move @119:9...
[[34m  Info  [0m]  - Result for 'map usage' VC for move @119:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @119:9...
[[34m  Info  [0m] Cache miss: 'cast correctness' VC for move @119:9...
[[34m  Info  [0m]  - Now solving 'cast correctness' VC for move @119:9...
[[34m  Info  [0m]  - Result for 'cast correctness' VC for move @119:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                            ║
[[34m  Info  [0m] ║ [33mrun[0m  [33mprecond. (call move[State, Sym](thiss, states, Some[Sym ...)[0m  [33munknown[0m  [33mnativez3[0m  [33mAutomaton.scala:129:25[0m  [33m0.272[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 26   valid: 25   (0 from cache) invalid: 0    unknown: 1    time:   4.142[0m                                    ║
[[34m  Info  [0m] ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 5464 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[31m Error  [0m] Quantification validInput[State, Sym](x$1470, x$1464, x$1467) == (x$1471.move((x$1464, x$1467)) ≠ x$1472) does not fit in supported fragment.
[[31m Error  [0m]   Reason: Can't guarantee model for complex matchers.
[[31m Error  [0m] Model obtained was:
[[31m Error  [0m]   word: List[Sym]        -> Cons[Sym](Sym#0, Nil[Sym]())
[[31m Error  [0m]   states: Set[State]     -> Set[State](USNil[State]())
[[31m Error  [0m]   thiss: NFA[State, Sym] -> NFA[State, Sym](Set[Sym](USNil[Sym]()), Set[State](USCons[State](State#20, USNil[State]())), {(State#22, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), (State#20, Some[Sym](Sym#26)) -> None[Set[State]](), * -> Some[Set[State]](Set[State](USNil[State]()))}, State#20, (x$1488: State) => if (x$1488 == State#23) {
[[31m Error  [0m]     true
[[31m Error  [0m]   } else {
[[31m Error  [0m]     true
[[31m Error  [0m]   })
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25:
[[33mWarning [0m]  => UNKNOWN
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @130:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @130:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @133:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @133:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @144:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @145:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @149:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @151:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @155:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @119:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @119:9...
[[34m  Info  [0m] Cache miss: 'map usage' VC for move @119:9...
[[34m  Info  [0m]  - Now solving 'map usage' VC for move @119:9...
[[31m Error  [0m] Quantification validInput[State, Sym](x$1729, x$1703, x$1706) == (x$1731.move((x$1703, x$1706)) ≠ x$1730) does not fit in supported fragment.
[[31m Error  [0m]   Reason: Can't guarantee model for complex matchers.
[[31m Error  [0m] Model obtained was:
[[31m Error  [0m]   w: Option[Sym]         -> Some[Sym](Sym#30)
[[31m Error  [0m]   states: Set[State]     -> Set[State](USCons[State](State#24, USNil[State]()))
[[31m Error  [0m]   thiss: NFA[State, Sym] -> NFA[State, Sym](Set[Sym](USCons[Sym](Sym#30, USCons[Sym](Sym#35, USNil[Sym]()))), Set[State](USCons[State](State#24, USNil[State]())), {(State#24, Some[Sym](Sym#30)) -> None[Set[State]](), (State#40, Some[Sym](Sym#30)) -> Some[Set[State]](Set[State](USNil[State]())), (State#27, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), (State#24, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), * -> Some[Set[State]](Set[State](USNil[State]()))}, State#24, (x$1745: State) => if (x$1745 == State#28) {
[[31m Error  [0m]     true
[[31m Error  [0m]   } else {
[[31m Error  [0m]     true
[[31m Error  [0m]   })
[[34m  Info  [0m]  - Result for 'map usage' VC for move @119:9:
[[33mWarning [0m]  => UNKNOWN
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @119:9...
[[34m  Info  [0m] Cache miss: 'cast correctness' VC for move @119:9...
[[34m  Info  [0m]  - Now solving 'cast correctness' VC for move @119:9...
[[34m  Info  [0m]  - Result for 'cast correctness' VC for move @119:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                             ║
[[34m  Info  [0m] ║ [33mmove[0m  [33mmap usage[0m                                                     [33munknown[0m  [33mnativez3[0m  [33mAutomaton.scala:119:9[0m   [33m0.290[0m ║
[[34m  Info  [0m] ║ [33mrun[0m   [33mprecond. (call move[State, Sym](thiss, states, Some[Sym ...)[0m  [33munknown[0m  [33mnativez3[0m  [33mAutomaton.scala:129:25[0m  [33m0.277[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 25   valid: 23   (8 from cache) invalid: 0    unknown: 2    time:   3.509[0m                                     ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 4920 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @163:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @164:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @164:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @159:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[31m Error  [0m] Quantification validInput[State, Sym](x$1884, x$1877, x$1880) == (x$1883.move((x$1877, x$1880)) ≠ x$1885) does not fit in supported fragment.
[[31m Error  [0m]   Reason: Can't guarantee model for complex matchers.
[[31m Error  [0m] Model obtained was:
[[31m Error  [0m]   word: List[Sym]        -> Cons[Sym](Sym#30, Nil[Sym]())
[[31m Error  [0m]   states: Set[State]     -> Set[State](USNil[State]())
[[31m Error  [0m]   thiss: NFA[State, Sym] -> NFA[State, Sym](Set[Sym](USNil[Sym]()), Set[State](USCons[State](State#28, USNil[State]())), {(State#25, Some[Sym](Sym#24)) -> Some[Set[State]](Set[State](USNil[State]())), (State#27, Some[Sym](Sym#26)) -> Some[Set[State]](Set[State](USNil[State]())), (State#28, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), * -> Some[Set[State]](Set[State](USNil[State]()))}, State#28, (x$1904: State) => if (x$1904 == State#36) {
[[31m Error  [0m]     true
[[31m Error  [0m]   } else {
[[31m Error  [0m]     true
[[31m Error  [0m]   })
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25:
[[33mWarning [0m]  => UNKNOWN
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @130:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @133:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @136:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @136:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @140:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @140:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @150:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @150:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @152:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @152:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @143:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @143:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @148:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @148:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @150:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @150:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @154:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @154:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @116:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for move @116:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'map usage' VC for move @118:9...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                            ║
[[34m  Info  [0m] ║ [33mrun[0m  [33mprecond. (call move[State, Sym](thiss, states, Some[Sym ...)[0m  [33munknown[0m  [33mnativez3[0m  [33mAutomaton.scala:129:25[0m  [33m0.365[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 26   valid: 25   (25 from cache) invalid: 0    unknown: 1    time:   1.032[0m                                   ║
[[34m  Info  [0m] ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2357 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:124:60: error: not found: value w
               require(states.subsetOf(validStates) && validSym(this, w))
                                                                      [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 634 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[31m Error  [0m] Automaton.scala:128:31: error: type mismatch;
[[31m Error  [0m]  found   : Sym
[[31m Error  [0m]  required: stainless.lang.Option[?]
                   assert(validSym(this, w))
                                         [31m^[0m
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞═════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                         ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 0    valid: 0    (0 from cache) invalid: 0    unknown: 0    time:   0.000[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 617 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @164:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @164:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @165:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @165:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @165:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @165:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @165:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @165:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @160:15...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @160:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m] Cache miss: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m]  - Now solving 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m]  - Result for 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @127:22...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @127:22...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @127:22...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @127:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @131:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @131:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @134:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @134:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @125:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @138:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @138:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @142:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @142:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @152:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @152:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @154:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @154:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @150:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @150:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @152:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @152:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @156:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @156:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @142:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @142:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @116:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for move @116:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'map usage' VC for move @118:9...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                       ║
[[34m  Info  [0m] ║ [33maccepts[0m  [33mprecond. (call run[State, Sym](thiss, start, word))[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:165:5[0m  [33m15.259[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 28   valid: 27   (18 from cache) invalid: 0    unknown: 1    time:  16.926[0m                              ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 18102 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13...
[[34m  Info  [0m] Cache miss: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13...
[[34m  Info  [0m]  - Now solving 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13...
[[34m  Info  [0m]  - Result for 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @127:22...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @127:22...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @131:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @134:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @138:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @138:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @142:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @142:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @152:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @152:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @154:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @154:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @150:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @150:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @152:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @152:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @156:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @156:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @142:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @142:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @116:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for move @116:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'map usage' VC for move @118:9...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 29   valid: 29   (25 from cache) invalid: 0    unknown: 0    time:   1.186[0m ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2397 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @129:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @131:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @131:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @134:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @134:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @138:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @138:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @142:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @142:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @152:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @152:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @154:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @154:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @146:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @150:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @150:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @152:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @152:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @156:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @156:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @142:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @142:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @116:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for move @116:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'map usage' VC for move @118:9...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 28   valid: 28   (23 from cache) invalid: 0    unknown: 0    time:   1.525[0m ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 2701 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for accepts @164:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @166:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @167:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @167:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @124:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @128:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @128:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @130:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @133:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @137:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @141:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @151:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @153:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @144:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @145:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @149:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @151:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @155:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @141:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @118:25...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @116:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for move @116:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @115:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'map usage' VC for move @118:9...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for move @118:9...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 28   valid: 28   (28 from cache) invalid: 0    unknown: 0    time:   0.631[0m ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 1813 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
