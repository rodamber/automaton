[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @338:5...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @338:5...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @338:5...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @338:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @338:18...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @338:18...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @338:18...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @338:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @339:21...
[[34m  Info  [0m] Cache miss: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @339:21...
[[34m  Info  [0m]  - Now solving 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @339:21...
[[34m  Info  [0m]  - Result for 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @339:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @336:74...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetIsSmallerOrEqual @336:74...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetIsSmallerOrEqual @336:74...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetIsSmallerOrEqual @336:74:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @232:21...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @232:21...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @232:21...
[[34m  Info  [0m]  - Result for 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @232:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @232:54...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @232:54...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @232:54...
[[34m  Info  [0m]  - Result for 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @232:54:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @229:76...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameTrans @229:76...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameTrans @229:76...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameTrans @229:76:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @241:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for sameExists @241:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for sameExists @241:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for sameExists @241:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @241:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @241:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @243:9...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for sameExists @243:9...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for sameExists @243:9...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for sameExists @243:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @243:30...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @243:30...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @243:30...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @243:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @244:14...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set2, p))' VC for sameExists @244:14...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set2, p))' VC for sameExists @244:14...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set2, p))' VC for sameExists @244:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @244:30...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @244:30...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @244:30...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @244:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @239:79...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameExists @239:79...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameExists @239:79...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameExists @239:79:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @239:51...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for sameExists @239:51...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for sameExists @239:51...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for sameExists @239:51:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for isEmpty @31:26:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @320:6...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @320:6...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @320:6...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @320:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @320:6...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @320:6...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @320:6...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @320:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @320:28...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](set1))' VC for diffSubsetSize @320:28...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](set1))' VC for diffSubsetSize @320:28...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](set1))' VC for diffSubsetSize @320:28:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @320:40...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](set2))' VC for diffSubsetSize @320:40...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](set2))' VC for diffSubsetSize @320:40...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](set2))' VC for diffSubsetSize @320:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @325:17...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @325:17...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @325:17...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @325:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @325:49...
[[34m  Info  [0m] Cache miss: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @325:49...
[[34m  Info  [0m]  - Now solving 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @325:49...
[[34m  Info  [0m]  - Result for 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @325:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @327:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @327:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @327:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @327:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @327:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @327:10...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @327:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @328:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @328:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:10...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @328:11...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @328:11...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @328:11...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @328:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:37...
[[34m  Info  [0m] Cache miss: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:37...
[[34m  Info  [0m]  - Now solving 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:37...
[[34m  Info  [0m]  - Result for 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @328:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @328:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @328:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @329:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @329:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @329:37...
[[34m  Info  [0m] Cache miss: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @329:37...
[[34m  Info  [0m]  - Now solving 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @329:37...
[[34m  Info  [0m]  - Result for 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @329:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @330:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @330:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @330:9...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](set1))' VC for diffSubsetSize @330:9...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](set1))' VC for diffSubsetSize @330:9...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](set1))' VC for diffSubsetSize @330:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @330:21...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](ys))' VC for diffSubsetSize @330:21...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](ys))' VC for diffSubsetSize @330:21...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](ys))' VC for diffSubsetSize @330:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @331:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @331:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @331:21...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](set2))' VC for diffSubsetSize @331:21...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](set2))' VC for diffSubsetSize @331:21...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](set2))' VC for diffSubsetSize @331:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @324:29...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for diffSubsetSize @324:29...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for diffSubsetSize @324:29...
[[34m  Info  [0m]  - Result for 'body assertion' VC for diffSubsetSize @324:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @318:66...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for diffSubsetSize @318:66...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for diffSubsetSize @318:66...
[[34m  Info  [0m]  - Result for 'postcondition' VC for diffSubsetSize @318:66:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @322:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for diffSubsetSize @322:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for diffSubsetSize @322:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for diffSubsetSize @322:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:12...
[[34m  Info  [0m] Cache miss: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:12...
[[34m  Info  [0m]  - Now solving 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:12...
[[34m  Info  [0m]  - Result for 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @313:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:12...
[[34m  Info  [0m] Cache miss: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:12...
[[34m  Info  [0m]  - Now solving 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:12...
[[34m  Info  [0m]  - Result for 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @313:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @315:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @315:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @313:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for subDecSize @313:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for subDecSize @313:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for subDecSize @313:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @311:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @311:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @311:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @311:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @311:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @311:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @311:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @311:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @281:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @281:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @281:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @281:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @281:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @281:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @281:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @281:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @284:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for tailContains @284:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for tailContains @284:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for tailContains @284:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameSymm @234:60...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameSymm @234:60...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameSymm @234:60...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameSymm @234:60:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameRefl @226:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameRefl @226:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameRefl @226:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameRefl @226:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @203:38...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for subsetExists @203:38...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for subsetExists @203:38...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for subsetExists @203:38:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @204:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set2, p))' VC for subsetExists @204:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set2, p))' VC for subsetExists @204:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set2, p))' VC for subsetExists @204:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @209:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @209:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @209:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @209:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @209:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @209:9...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for subsetExists @209:9...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for subsetExists @209:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @210:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @211:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @211:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @211:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @211:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:20...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set2, p))' VC for subsetExists @211:20...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set2, p))' VC for subsetExists @211:20...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set2, p))' VC for subsetExists @211:20:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @211:40...
[[34m  Info  [0m] Cache miss: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @211:40...
[[34m  Info  [0m]  - Now solving 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @211:40...
[[34m  Info  [0m]  - Result for 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @211:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @212:12...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @212:12...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @212:12...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @212:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @212:12...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @212:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @212:12...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set2, x))' VC for subsetExists @212:12...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set2, x))' VC for subsetExists @212:12...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set2, x))' VC for subsetExists @212:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @212:40...
[[34m  Info  [0m] Cache miss: 'precond. (call addId[T](set2, x))' VC for subsetExists @212:40...
[[34m  Info  [0m]  - Now solving 'precond. (call addId[T](set2, x))' VC for subsetExists @212:40...
[[34m  Info  [0m]  - Result for 'precond. (call addId[T](set2, x))' VC for subsetExists @212:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @213:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @213:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @215:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @215:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @215:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @215:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @215:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @215:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @215:9...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for subsetExists @215:9...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for subsetExists @215:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @216:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @216:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @216:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @216:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @216:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @216:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @216:30...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @216:30...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @216:30...
[[34m  Info  [0m]  - Result for 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @216:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @217:11...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @201:81...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetExists @201:81...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetExists @201:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetExists @201:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @201:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @201:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @206:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for subsetExists @206:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for subsetExists @206:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for subsetExists @206:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @208:33...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for subsetExists @208:33...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for subsetExists @208:33...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for subsetExists @208:33:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @210:11...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for subsetExists @210:11...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for subsetExists @210:11...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for subsetExists @210:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @211:12...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @211:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for addExists @150:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](xs, p))' VC for exists @40:35:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for exists @38:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for exists @40:27:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @294:6...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](set1, set2))' VC for diffContains @294:6...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](set1, set2))' VC for diffContains @294:6...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](set1, set2))' VC for diffContains @294:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @299:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @299:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @299:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @299:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @299:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @299:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @299:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @299:10...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](set1, set2))' VC for diffContains @299:10...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](set1, set2))' VC for diffContains @299:10...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](set1, set2))' VC for diffContains @299:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @300:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @300:10...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @300:10...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @300:10...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @300:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @300:11...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](set1, ys))' VC for diffContains @300:11...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](set1, ys))' VC for diffContains @300:11...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](set1, ys))' VC for diffContains @300:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @300:44...
[[34m  Info  [0m] Cache miss: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @300:44...
[[34m  Info  [0m]  - Now solving 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @300:44...
[[34m  Info  [0m]  - Result for 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @300:44:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @300:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @300:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @301:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @301:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @301:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @301:44...
[[34m  Info  [0m] Cache miss: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @301:44...
[[34m  Info  [0m]  - Now solving 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @301:44...
[[34m  Info  [0m]  - Result for 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @301:44:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @292:70...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for diffContains @292:70...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for diffContains @292:70...
[[34m  Info  [0m]  - Result for 'postcondition' VC for diffContains @292:70:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @296:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for diffContains @296:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for diffContains @296:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for diffContains @296:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](that))' VC for -- @94:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m] Cache miss: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m]  - Now solving 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m]  - Result for 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](thiss, ys))' VC for -- @99:27:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](ys))' VC for -- @100:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](that))' VC for -- @100:26:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m] Cache miss: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m]  - Now solving 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m]  - Result for 'precond. (call --[T](thiss, ys))' VC for -- @102:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for -- @98:26...
[[34m  Info  [0m]  - Result for 'body assertion' VC for -- @98:26:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for -- @100:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for -- @100:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for -- @104:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for -- @104:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for -- @96:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for -- @96:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](set, y))' VC for subIsSound @170:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](set, y))' VC for subIsSound @178:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](xs, y))' VC for subIsSound @179:34:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](xs, y))' VC for subIsSound @180:50:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m] Cache miss: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m]  - Now solving 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m]  - Result for 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subIsSound @168:52:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for subIsSound @173:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](xs, y))' VC for - @88:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for - @84:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:19...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:19...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:19...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:50...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:50...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:50...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @253:50:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @254:21...
[[34m  Info  [0m] Cache miss: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @254:21...
[[34m  Info  [0m]  - Now solving 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @254:21...
[[34m  Info  [0m]  - Result for 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @254:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @254:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @254:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @254:84...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @254:84...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @254:84...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @254:84:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @251:65...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetOfUnion @251:65...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetOfUnion @251:65...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetOfUnion @251:65:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @258:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @258:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @263:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @263:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @263:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @263:10...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @263:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @264:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @264:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @264:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @264:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @264:10...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @264:10...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @264:10...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @264:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @264:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @264:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @264:11...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @264:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @264:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @264:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @264:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @264:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @265:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @265:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @265:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @265:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @265:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @265:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @265:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @265:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @256:89...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for unionOfSubsetsIsSubset @256:89...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for unionOfSubsetsIsSubset @256:89...
[[34m  Info  [0m]  - Result for 'postcondition' VC for unionOfSubsetsIsSubset @256:89:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @260:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @260:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for unionOfSubsetsIsSubset @260:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for unionOfSubsetsIsSubset @260:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @274:6...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @274:6...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @274:6...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @274:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @274:6...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @274:6...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @274:6...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @274:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @272:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @272:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @272:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @272:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @272:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @272:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @272:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @272:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for subsetOf @19:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](thiss))' VC for ++ @69:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m] Cache miss: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m]  - Now solving 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m]  - Result for 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](xs, that))' VC for ++ @74:27:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](xs))' VC for ++ @75:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](thiss))' VC for ++ @75:26:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](xs, that))' VC for ++ @77:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m]  - Result for 'body assertion' VC for ++ @73:26:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for ++ @75:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for ++ @79:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for ++ @71:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for ++ @71:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m] Cache miss: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m]  - Now solving 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m]  - Result for 'precond. (call size[T](xs))' VC for size @48:33:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for size @50:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for size @50:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for size @50:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](set, y))' VC for addIsSound @137:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](xs, y))' VC for addIsSound @138:32:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](xs, y))' VC for addIsSound @139:48:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m]  - Result for 'postcondition' VC for addIsSound @128:52:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for addIsSound @132:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache miss: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @13:32:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @14:28:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for unapply @18:54:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for unapply @20:36:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19...
[[34m  Info  [0m] Cache miss: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19...
[[34m  Info  [0m]  - Now solving 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19...
[[34m  Info  [0m]  - Result for 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @109:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @108:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for unionOfSubsetsIsSubset @108:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for unionOfSubsetsIsSubset @108:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for unionOfSubsetsIsSubset @108:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19...
[[34m  Info  [0m]  - Result for 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @80:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @77:75...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTrans @77:75...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTrans @77:75...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTrans @77:75:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](thiss.uset, y))' VC for - @60:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m] Cache miss: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m]  - Now solving 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call -[T](thiss.uset, y))' VC for - @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for - @59:25...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for - @59:25...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for - @59:25...
[[34m  Info  [0m]  - Result for 'body assertion' VC for - @59:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for - @61:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for - @61:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameSymm[T](set1.uset, set2.uset))' VC for sameSymm @97:19...
[[34m  Info  [0m] Cache miss: 'precond. (call sameSymm[T](set1.uset, set2.uset))' VC for sameSymm @97:19...
[[34m  Info  [0m]  - Now solving 'precond. (call sameSymm[T](set1.uset, set2.uset))' VC for sameSymm @97:19...
[[34m  Info  [0m]  - Result for 'precond. (call sameSymm[T](set1.uset, set2.uset))' VC for sameSymm @97:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameSymm @94:58...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameSymm @94:58...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameSymm @94:58...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameSymm @94:58:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameRefl @86:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameRefl @86:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameRefl @86:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameRefl @86:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @74:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetRefl @74:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetRefl @74:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetRefl @74:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @92:19...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @92:19...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @92:19...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @92:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @89:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameTrans @89:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameTrans @89:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameTrans @89:73:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @101:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](set1, p))' VC for sameExists @101:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](set1, p))' VC for sameExists @101:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](set1, p))' VC for sameExists @101:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @101:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @101:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @102:19...
[[34m  Info  [0m] Cache miss: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @102:19...
[[34m  Info  [0m]  - Now solving 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @102:19...
[[34m  Info  [0m]  - Result for 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @102:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @99:77...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for sameExists @99:77...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for sameExists @99:77...
[[34m  Info  [0m]  - Result for 'postcondition' VC for sameExists @99:77:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @99:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @99:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19...
[[34m  Info  [0m]  - Result for 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @113:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @112:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetOfUnion @112:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetOfUnion @112:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetOfUnion @112:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m] Cache miss: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Now solving 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Result for 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for ++ @57:34:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19...
[[34m  Info  [0m]  - Result for 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @121:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetIsSmallerOrEqual @118:72...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetIsSmallerOrEqual @118:72:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m] Cache miss: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m]  - Now solving 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m]  - Result for 'precond. (call +[T](thiss.uset, y))' VC for + @54:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for + @52:25...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for + @52:25...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for + @52:25...
[[34m  Info  [0m]  - Result for 'body assertion' VC for + @52:25:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for + @54:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for + @54:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for -- @64:34:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @126:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @123:71...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @123:71...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @123:71...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @123:71:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for size @50:47...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for size @50:47...
[[34m  Info  [0m]  - Result for 'postcondition' VC for size @50:47:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @77:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @77:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @77:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @68:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @69:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @71:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m] Cache miss: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m]  - Now solving 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7...
[[34m  Info  [0m]  - Result for 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @72:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @72:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @69:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @69:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @66:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @66:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @33:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @35:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @41:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @42:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @42:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @43:12...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @43:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @44:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @44:32:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @51:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @52:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @54:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @54:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @54:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @54:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @55:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @55:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @55:45:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @56:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @56:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @57:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @57:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @58:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @59:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @59:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @60:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @60:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @60:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @60:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @60:45...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @51:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @51:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @32:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @32:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @32:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @32:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @39:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @39:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for accepts @90:5...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for accepts @90:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @98:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @98:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @98:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @105:44...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @105:44:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @151:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @83:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @83:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for run @85:29...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for run @85:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @155:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @156:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @156:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @119:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @123:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @123:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @122:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @122:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @122:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @122:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @125:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @125:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @125:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @125:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @118:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @118:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @129:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @143:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @145:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @136:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @136:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @137:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @137:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @141:12...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @141:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @143:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @143:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @147:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @147:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @147:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @147:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for epsClosure @133:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @164:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for moveValid @164:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for moveValid @164:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for moveValid @164:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @166:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for moveValid @166:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for moveValid @166:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for moveValid @166:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @168:34...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for moveValid @168:34...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for moveValid @168:34...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for moveValid @168:34:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for move @110:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for move @110:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for move @111:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for move @111:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing argument lists lexicographically)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Chain Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 329  valid: 329  (52 from cache) invalid: 0    unknown: 0    time:  52.110[0m ║
[[34m  Info  [0m] ╚═══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 72   valid: 72   (0 from cache) invalid: 0    unknown: 0    time:  91.021[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 153734 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[33mWarning [0m] Interrupted...
[[34m  Info  [0m] Shutting down executor service.
