[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @73:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @73:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @86:5...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for accepts @86:5...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for accepts @86:5...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for accepts @86:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @79:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @79:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @79:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @79:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @81:29...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for run @81:29...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for run @81:29...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for run @81:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for uniqueForall @158:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for uniqueForall @158:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @158:21...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @158:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](::[T](-[T](unique[T](as), a),  ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](::[T](-[T](unique[T](as), a),  ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @165:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @165:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](unique[T](as), a), p))' VC for uniqueForall @165:19...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](unique[T](as), a), p))' VC for uniqueForall @165:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subForall[T](unique[T](as), a, p))' VC for uniqueForall @165:50...
[[34m  Info  [0m] Cache hit: 'precond. (call subForall[T](unique[T](as), a, p))' VC for uniqueForall @165:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @166:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @166:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](as), p))' VC for uniqueForall @166:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](as), p))' VC for uniqueForall @166:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueForall[T](as, p))' VC for uniqueForall @166:50...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueForall[T](as, p))' VC for uniqueForall @166:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @167:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @167:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for uniqueForall @167:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for uniqueForall @167:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for uniqueForall @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for uniqueForall @168:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueForall @158:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueForall @158:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @157:36...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @157:36...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueForall @160:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueForall @160:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @162:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @162:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @165:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @165:10...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @166:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @166:10...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @167:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @167:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @242:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @242:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueCount[T](xs, x))' VC for uniqueSubSize @242:47...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueCount[T](xs, x))' VC for uniqueSubSize @242:47...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueSubSize @237:54...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueSubSize @237:54...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount3 @205:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount3 @205:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount3 @205:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount3 @205:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](unique[T](xs), (x$9: T) => { ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](unique[T](xs), (x$9: T) => { ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @220:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @220:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$12: ...)' VC for uniqueCount @220:18...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$12: ...)' VC for uniqueCount @220:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @221:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @221:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$14: ...)' VC for uniqueCount @221:16...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$14: ...)' VC for uniqueCount @221:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @222:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @222:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](unique[T](xs), (x$15: T) => { ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](unique[T](xs), (x$15: T) => { ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$18: ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$18: ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @229:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @229:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subCount2[T](unique[T](ys), y, x))' VC for uniqueCount @229:59...
[[34m  Info  [0m] Cache hit: 'precond. (call subCount2[T](unique[T](ys), y, x))' VC for uniqueCount @229:59...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @230:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @230:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueCount[T](ys, x))' VC for uniqueCount @230:59...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueCount[T](ys, x))' VC for uniqueCount @230:59...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueCount @209:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueCount @209:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueCount @213:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueCount @213:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount @194:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount @194:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount @194:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount @194:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount2 @199:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount2 @199:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount2 @199:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount2 @199:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](xs, (x$8: T) => { ...)' VC for count @190:5...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](xs, (x$8: T) => { ...)' VC for count @190:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Cons))' VC for subForall @154:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Cons))' VC for subForall @154:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Nil))' VC for subForall @154:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Nil))' VC for subForall @154:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Cons))' VC for subForall @154:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Cons))' VC for subForall @154:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Nil))' VC for subForall @154:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Nil))' VC for subForall @154:22...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subForall @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subForall @152:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subForall @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subForall @152:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subForall @152:39...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subForall @152:39...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subForall @153:13...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subForall @153:13...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @313:40...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @313:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[Set[T], Set[T]](ps, (x$6: Set[T]) => ...)' VC for powerSet @133:15...
[[34m  Info  [0m] Cache hit: 'precond. (call map[Set[T], Set[T]](ps, (x$6: Set[T]) => ...)' VC for powerSet @133:15...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for powerSet @130:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for powerSet @130:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](ss, p))' VC for filter @123:32...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](ss, p))' VC for filter @123:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](ss, p))' VC for filter @124:24...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](ss, p))' VC for filter @124:24...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for filter @121:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for filter @121:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for filter @122:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for filter @122:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for filter @123:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for filter @123:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for & @86:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for & @86:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @58:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @159:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @159:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @159:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @159:17:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:5...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:5...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Cons)' VC for existsAssoc @23:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Cons)' VC for existsAssoc @23:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Nil)' VC for existsAssoc @23:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Nil)' VC for existsAssoc @23:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for existsAssoc @23:48...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for existsAssoc @23:48...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for existsAssoc @490:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for existsAssoc @490:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:60...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:60...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:19...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @29:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @38:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for lemma @49:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @50:19...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for lemma @50:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @104:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @25:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.list, p))' VC for exists @104:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.list, p))' VC for exists @104:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @104:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @104:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @126:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @131:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @131:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @130:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @130:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @130:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @133:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @133:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @133:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @125:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @125:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @149:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @155:15...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @155:15...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @155:15...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @155:15:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @141:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @141:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @141:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @141:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @150:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @150:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @150:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @150:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @139:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for epsClosure @139:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for epsClosure @139:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for epsClosure @139:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @119:20...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @119:20...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for flatMap @118:18...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for flatMap @118:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, U](thiss.list, f))' VC for map @116:39...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, U](thiss.list, f))' VC for map @116:39...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for map @116:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for map @116:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for flatten @142:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for flatten @142:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @305:52...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @305:52...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @94:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @94:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @101:44:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @112:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for moveValid @112:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for moveValid @112:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for moveValid @112:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @114:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for moveValid @114:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for moveValid @114:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for moveValid @114:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @116:30...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for moveValid @116:30...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for moveValid @116:30...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for moveValid @116:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @105:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @105:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @106:24...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for move @106:24...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for move @106:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for move @106:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @179:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @179:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](++[T](xs, ys), p))' VC for unionSubset @179:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](++[T](xs, ys), p))' VC for unionSubset @179:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @180:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @180:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](set[T](++[T](xs.list, ys.list) ...)' VC for unionSubset @180:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](set[T](++[T](xs.list, ys.list) ...)' VC for unionSubset @180:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @181:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @181:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](++[T](xs.list, ys.li ...)' VC for unionSubset @181:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](++[T](xs.list, ys.li ...)' VC for unionSubset @181:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueForall[T](++[T](xs.list, ys.list), ...)' VC for unionSubset @181:50...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueForall[T](++[T](xs.list, ys.list), ...)' VC for unionSubset @181:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @182:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @182:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](++[T](xs.list, ys.list), p))' VC for unionSubset @182:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](++[T](xs.list, ys.list), p))' VC for unionSubset @182:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forallAssoc[T](xs.list, ys.list, p))' VC for unionSubset @182:50...
[[34m  Info  [0m] Cache hit: 'precond. (call forallAssoc[T](xs.list, ys.list, p))' VC for unionSubset @182:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @183:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @183:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs.list, p))' VC for unionSubset @183:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs.list, p))' VC for unionSubset @183:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys.list, p))' VC for unionSubset @183:27...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys.list, p))' VC for unionSubset @183:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @184:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @184:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for unionSubset @184:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for unionSubset @184:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys, p))' VC for unionSubset @184:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys, p))' VC for unionSubset @184:22...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionSubset @174:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionSubset @174:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forallAssoc @18:48...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forallAssoc @18:48...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forallAssoc @484:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forallAssoc @484:14...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @13:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @13:24...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:4...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:4...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:19...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:19...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for set @36:39...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for set @36:39...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @107:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @107:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfSize[T](thiss, that))' VC for subsetOf @108:22...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfSize[T](thiss, that))' VC for subsetOf @108:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subSubset[T](xs, ss, s))' VC for setSubSubSize @257:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subSubset[T](xs, ss, s))' VC for setSubSubSize @257:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @260:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @260:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSubSize[T](-[T](xs, s), ss))' VC for setSubSubSize @260:42...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSubSize[T](-[T](xs, s), ss))' VC for setSubSubSize @260:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @262:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @262:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSize[T](xs, s))' VC for setSubSubSize @262:42...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSize[T](xs, s))' VC for setSubSubSize @262:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @263:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @263:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @281:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @281:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys, p))' VC for subSubset @281:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys, p))' VC for subSubset @281:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @282:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @282:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys.list, p))' VC for subSubset @282:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys.list, p))' VC for subSubset @282:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @283:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @283:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for subSubset @283:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for subSubset @283:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @284:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @284:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for subSubset @284:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for subSubset @284:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](Set[T](as), p))' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](Set[T](as), p))' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @286:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @286:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subSubset[T](xs, Set[T](as), y))' VC for subSubset @286:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subSubset[T](xs, Set[T](as), y))' VC for subSubset @286:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSubSize[T](ys, xs))' VC for subsetOfSize @297:36...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSubSize[T](ys, xs))' VC for subsetOfSize @297:36...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for setSubSubSize @256:24...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for setSubSubSize @256:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOf @108:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOf @108:16...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for setSubSubSize @251:59...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for setSubSubSize @251:59...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setSubSubSize @255:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setSubSubSize @255:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subSubset @270:61...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subSubset @270:61...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subSubset @274:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subSubset @274:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subSubset @283:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subSubset @283:10...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @286:9...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @286:9...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @286:51...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @286:51...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfSize @293:58...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfSize @293:58...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueSubSize[T](xs.list, x))' VC for setSubSize @249:21...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueSubSize[T](xs.list, x))' VC for setSubSize @249:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for setSubSize @246:50...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for setSubSize @246:50...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @78:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @78:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss.list, p))' VC for forall @102:42...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss.list, p))' VC for forall @102:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forall @102:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forall @102:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m] Cache hit: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @74:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for - @74:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                   ║
[[34m  Info  [0m] ║ [33maccepts[0m    [33mprecond. (call epsClosure[State, Sym](thiss, set[State] ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:159:17[0m  [33m15.169[0m ║
[[34m  Info  [0m] ║ [33mapply[0m      [33mprecond. (call epsClosure[State, Sym](nfa, set[State](n ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:22:24[0m   [33m15.153[0m ║
[[34m  Info  [0m] ║ [33mapply[0m      [33madt invariant[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:25:5[0m    [33m15.219[0m ║
[[34m  Info  [0m] ║ [33mepsClosed[0m  [33mprecond. (call epsClosure[State, Sym](thiss, states))[0m         [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:155:15[0m  [33m15.197[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 325  valid: 321  (265 from cache) invalid: 0    unknown: 4    time:  98.589[0m                                         ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 110523 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @313:40...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @313:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[Set[T], Set[T]](ps, (x$6: Set[T]) => ...)' VC for powerSet @133:15...
[[34m  Info  [0m] Cache hit: 'precond. (call map[Set[T], Set[T]](ps, (x$6: Set[T]) => ...)' VC for powerSet @133:15...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for powerSet @130:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for powerSet @130:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](ss, p))' VC for filter @123:32...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](ss, p))' VC for filter @123:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](ss, p))' VC for filter @124:24...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](ss, p))' VC for filter @124:24...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for filter @121:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for filter @121:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for filter @122:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for filter @122:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for filter @123:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for filter @123:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for & @86:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for & @86:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @305:52...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @305:52...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @58:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @160:17...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @160:17...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @160:17...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @160:17:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @161:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @161:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @161:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @161:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @161:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @161:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @161:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @161:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:60...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:60...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:19...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @29:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @38:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for lemma @49:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @50:19...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for lemma @50:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @104:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @25:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.list, p))' VC for exists @104:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.list, p))' VC for exists @104:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @104:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @104:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @131:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for run @131:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @134:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @134:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @126:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @156:15...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @156:15...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @156:15...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @156:15:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @142:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @142:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @142:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @142:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @151:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5...
[[34m  Info  [0m] Cache miss: 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5...
[[34m  Info  [0m]  - Now solving 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5...
[[34m  Info  [0m]  - Result for 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @119:20...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @119:20...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for flatMap @118:18...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for flatMap @118:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, U](thiss.list, f))' VC for map @116:39...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, U](thiss.list, f))' VC for map @116:39...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for map @116:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for map @116:14...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @86:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @86:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @79:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @79:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @81:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @81:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @94:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @94:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @101:44:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @113:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for moveValid @113:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for moveValid @113:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for moveValid @113:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @115:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for moveValid @115:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for moveValid @115:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for moveValid @115:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @117:30...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for moveValid @117:30...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for moveValid @117:30...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for moveValid @117:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @106:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @106:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @107:24...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for move @107:24...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for move @107:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for move @107:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @179:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @179:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](++[T](xs, ys), p))' VC for unionSubset @179:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](++[T](xs, ys), p))' VC for unionSubset @179:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @180:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @180:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](set[T](++[T](xs.list, ys.list) ...)' VC for unionSubset @180:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](set[T](++[T](xs.list, ys.list) ...)' VC for unionSubset @180:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @181:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @181:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](++[T](xs.list, ys.li ...)' VC for unionSubset @181:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](++[T](xs.list, ys.li ...)' VC for unionSubset @181:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueForall[T](++[T](xs.list, ys.list), ...)' VC for unionSubset @181:50...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueForall[T](++[T](xs.list, ys.list), ...)' VC for unionSubset @181:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @182:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @182:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](++[T](xs.list, ys.list), p))' VC for unionSubset @182:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](++[T](xs.list, ys.list), p))' VC for unionSubset @182:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forallAssoc[T](xs.list, ys.list, p))' VC for unionSubset @182:50...
[[34m  Info  [0m] Cache hit: 'precond. (call forallAssoc[T](xs.list, ys.list, p))' VC for unionSubset @182:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @183:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @183:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs.list, p))' VC for unionSubset @183:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs.list, p))' VC for unionSubset @183:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys.list, p))' VC for unionSubset @183:27...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys.list, p))' VC for unionSubset @183:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @184:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @184:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for unionSubset @184:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for unionSubset @184:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys, p))' VC for unionSubset @184:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys, p))' VC for unionSubset @184:22...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionSubset @174:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionSubset @174:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for uniqueForall @158:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for uniqueForall @158:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @158:21...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @158:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](::[T](-[T](unique[T](as), a),  ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](::[T](-[T](unique[T](as), a),  ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @165:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @165:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](unique[T](as), a), p))' VC for uniqueForall @165:19...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](unique[T](as), a), p))' VC for uniqueForall @165:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subForall[T](unique[T](as), a, p))' VC for uniqueForall @165:50...
[[34m  Info  [0m] Cache hit: 'precond. (call subForall[T](unique[T](as), a, p))' VC for uniqueForall @165:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @166:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @166:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](as), p))' VC for uniqueForall @166:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](as), p))' VC for uniqueForall @166:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueForall[T](as, p))' VC for uniqueForall @166:50...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueForall[T](as, p))' VC for uniqueForall @166:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @167:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @167:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for uniqueForall @167:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for uniqueForall @167:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for uniqueForall @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for uniqueForall @168:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueForall @158:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueForall @158:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @157:36...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @157:36...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueForall @160:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueForall @160:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @162:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @162:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @165:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @165:10...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @166:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @166:10...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @167:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @167:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Cons))' VC for subForall @154:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Cons))' VC for subForall @154:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Nil))' VC for subForall @154:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Nil))' VC for subForall @154:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Cons))' VC for subForall @154:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Cons))' VC for subForall @154:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Nil))' VC for subForall @154:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Nil))' VC for subForall @154:22...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subForall @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subForall @152:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subForall @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subForall @152:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subForall @152:39...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subForall @152:39...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subForall @153:13...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subForall @153:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forallAssoc @18:48...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forallAssoc @18:48...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forallAssoc @484:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forallAssoc @484:14...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @13:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @13:24...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:4...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:4...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:19...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:19...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @107:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @107:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfSize[T](thiss, that))' VC for subsetOf @108:22...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfSize[T](thiss, that))' VC for subsetOf @108:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subSubset[T](xs, ss, s))' VC for setSubSubSize @257:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subSubset[T](xs, ss, s))' VC for setSubSubSize @257:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @260:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @260:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSubSize[T](-[T](xs, s), ss))' VC for setSubSubSize @260:42...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSubSize[T](-[T](xs, s), ss))' VC for setSubSubSize @260:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @262:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @262:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSize[T](xs, s))' VC for setSubSubSize @262:42...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSize[T](xs, s))' VC for setSubSubSize @262:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @263:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @263:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @281:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @281:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys, p))' VC for subSubset @281:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys, p))' VC for subSubset @281:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @282:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @282:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys.list, p))' VC for subSubset @282:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys.list, p))' VC for subSubset @282:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @283:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @283:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for subSubset @283:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for subSubset @283:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @284:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @284:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for subSubset @284:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for subSubset @284:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](Set[T](as), p))' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](Set[T](as), p))' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @286:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @286:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subSubset[T](xs, Set[T](as), y))' VC for subSubset @286:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subSubset[T](xs, Set[T](as), y))' VC for subSubset @286:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSubSize[T](ys, xs))' VC for subsetOfSize @297:36...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSubSize[T](ys, xs))' VC for subsetOfSize @297:36...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for setSubSubSize @256:24...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for setSubSubSize @256:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOf @108:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOf @108:16...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for setSubSubSize @251:59...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for setSubSubSize @251:59...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setSubSubSize @255:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setSubSubSize @255:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subSubset @270:61...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subSubset @270:61...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subSubset @274:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subSubset @274:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subSubset @283:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subSubset @283:10...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @286:9...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @286:9...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @286:51...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @286:51...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfSize @293:58...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfSize @293:58...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueSubSize[T](xs.list, x))' VC for setSubSize @249:21...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueSubSize[T](xs.list, x))' VC for setSubSize @249:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for setSubSize @246:50...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for setSubSize @246:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @242:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @242:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueCount[T](xs, x))' VC for uniqueSubSize @242:47...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueCount[T](xs, x))' VC for uniqueSubSize @242:47...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueSubSize @237:54...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueSubSize @237:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](unique[T](xs), (x$9: T) => { ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](unique[T](xs), (x$9: T) => { ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @220:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @220:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$12: ...)' VC for uniqueCount @220:18...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$12: ...)' VC for uniqueCount @220:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @221:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @221:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$14: ...)' VC for uniqueCount @221:16...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$14: ...)' VC for uniqueCount @221:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @222:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @222:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](unique[T](xs), (x$15: T) => { ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](unique[T](xs), (x$15: T) => { ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$18: ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$18: ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @229:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @229:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subCount2[T](unique[T](ys), y, x))' VC for uniqueCount @229:59...
[[34m  Info  [0m] Cache hit: 'precond. (call subCount2[T](unique[T](ys), y, x))' VC for uniqueCount @229:59...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @230:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @230:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueCount[T](ys, x))' VC for uniqueCount @230:59...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueCount[T](ys, x))' VC for uniqueCount @230:59...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueCount @209:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueCount @209:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueCount @213:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueCount @213:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount @194:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount @194:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount @194:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount @194:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount2 @199:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount2 @199:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount2 @199:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount2 @199:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount3 @205:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount3 @205:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount3 @205:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount3 @205:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](xs, (x$8: T) => { ...)' VC for count @190:5...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](xs, (x$8: T) => { ...)' VC for count @190:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @78:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @78:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss.list, p))' VC for forall @102:42...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss.list, p))' VC for forall @102:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forall @102:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forall @102:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m] Cache hit: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for flatten @142:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for flatten @142:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for set @36:39...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for set @36:39...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @74:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for - @74:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                            ║
[[34m  Info  [0m] ║ [33mapply[0m      [33madt invariant[0m                                          [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:25:5[0m    [33m15.209[0m ║
[[34m  Info  [0m] ║ [33mepsClosed[0m  [33mprecond. (call epsClosure[State, Sym](thiss, states))[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:156:15[0m  [33m15.208[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 323  valid: 321  (269 from cache) invalid: 0    unknown: 2    time:  73.260[0m                                  ║
[[34m  Info  [0m] ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 79886 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Detecting some file modifications...: /Users/rodamber/Workspace/LARA/automaton/Automaton.scala
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @73:1...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @313:40...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @313:40...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @305:52...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @305:52...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for dfaNfaEquiv @60:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @64:63:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @58:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @58:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for dfaNfaEquiv @67:7...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for dfaNfaEquiv @67:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @159:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, set[State] ...)' VC for accepts @159:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @160:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @160:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @30:13...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @30:13...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @30:13...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @30:13:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @33:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:9...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @41:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @41:36...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @41:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @42:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @51:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:60...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @51:60...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @52:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:19...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @52:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @53:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @29:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @29:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @38:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @38:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for lemma @49:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for lemma @50:19...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for lemma @50:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @19:7...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, set[State](n ...)' VC for apply @22:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @23:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @104:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @104:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @25:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @25:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.list, p))' VC for exists @104:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.list, p))' VC for exists @104:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @104:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @104:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @127:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @132:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @132:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @131:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @131:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @134:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @134:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @134:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @126:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:10...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @150:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](thiss, res))' VC for epsClosure @152:5...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](thiss, res))' VC for epsClosure @152:5...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](thiss, res))' VC for epsClosure @152:5...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](thiss, res))' VC for epsClosure @152:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @157:15...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @157:15...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @157:15...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @157:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @142:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @142:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @151:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @151:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @140:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @119:20...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @119:20...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for flatMap @118:18...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for flatMap @118:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, U](thiss.list, f))' VC for map @116:39...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, U](thiss.list, f))' VC for map @116:39...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for map @116:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for map @116:14...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @86:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @86:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @79:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @79:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for run @81:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for run @81:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @94:1...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @101:44...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for flatten @142:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for flatten @142:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @113:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @113:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @115:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @115:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for moveValid @117:30...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for moveValid @117:30...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @106:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @106:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for move @107:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for move @107:24...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @178:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @178:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @179:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @179:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](++[T](xs, ys), p))' VC for unionSubset @179:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](++[T](xs, ys), p))' VC for unionSubset @179:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @180:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @180:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](set[T](++[T](xs.list, ys.list) ...)' VC for unionSubset @180:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](set[T](++[T](xs.list, ys.list) ...)' VC for unionSubset @180:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @181:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @181:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](++[T](xs.list, ys.li ...)' VC for unionSubset @181:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](++[T](xs.list, ys.li ...)' VC for unionSubset @181:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueForall[T](++[T](xs.list, ys.list), ...)' VC for unionSubset @181:50...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueForall[T](++[T](xs.list, ys.list), ...)' VC for unionSubset @181:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @182:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @182:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](++[T](xs.list, ys.list), p))' VC for unionSubset @182:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](++[T](xs.list, ys.list), p))' VC for unionSubset @182:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forallAssoc[T](xs.list, ys.list, p))' VC for unionSubset @182:50...
[[34m  Info  [0m] Cache hit: 'precond. (call forallAssoc[T](xs.list, ys.list, p))' VC for unionSubset @182:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @183:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @183:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs.list, p))' VC for unionSubset @183:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs.list, p))' VC for unionSubset @183:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys.list, p))' VC for unionSubset @183:27...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys.list, p))' VC for unionSubset @183:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @184:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionSubset @184:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for unionSubset @184:6...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for unionSubset @184:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys, p))' VC for unionSubset @184:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys, p))' VC for unionSubset @184:22...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionSubset @174:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionSubset @174:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for uniqueForall @158:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for uniqueForall @158:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @158:21...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @158:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @163:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](xs), p))' VC for uniqueForall @163:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](::[T](-[T](unique[T](as), a),  ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](::[T](-[T](unique[T](as), a),  ...)' VC for uniqueForall @164:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @165:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @165:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](unique[T](as), a), p))' VC for uniqueForall @165:19...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](unique[T](as), a), p))' VC for uniqueForall @165:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subForall[T](unique[T](as), a, p))' VC for uniqueForall @165:50...
[[34m  Info  [0m] Cache hit: 'precond. (call subForall[T](unique[T](as), a, p))' VC for uniqueForall @165:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @166:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @166:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](unique[T](as), p))' VC for uniqueForall @166:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](unique[T](as), p))' VC for uniqueForall @166:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueForall[T](as, p))' VC for uniqueForall @166:50...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueForall[T](as, p))' VC for uniqueForall @166:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @167:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for uniqueForall @167:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for uniqueForall @167:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for uniqueForall @167:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for uniqueForall @168:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for uniqueForall @168:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueForall @158:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueForall @158:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @157:36...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @157:36...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueForall @160:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueForall @160:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @162:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @162:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @165:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @165:10...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @166:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @166:10...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for uniqueForall @167:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for uniqueForall @167:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Cons))' VC for subForall @154:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Cons))' VC for subForall @154:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Nil))' VC for subForall @154:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p), ind. on (xs: List[T] : Nil))' VC for subForall @154:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Cons))' VC for subForall @154:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Cons))' VC for subForall @154:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Nil))' VC for subForall @154:22...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](-[T](xs, x), p), ind. on (xs: List[T] : Nil))' VC for subForall @154:22...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subForall @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subForall @152:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subForall @152:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subForall @152:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subForall @152:39...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subForall @152:39...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subForall @153:13...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subForall @153:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Checking cache: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4...
[[34m  Info  [0m] Cache hit: 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forallAssoc @18:48...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forallAssoc @18:48...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forallAssoc @484:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forallAssoc @484:14...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @13:24...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @13:24...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:4...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:4...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:19...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:19...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @107:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss, (x: T) => { ...)' VC for subsetOf @107:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfSize[T](thiss, that))' VC for subsetOf @108:22...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfSize[T](thiss, that))' VC for subsetOf @108:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subSubset[T](xs, ss, s))' VC for setSubSubSize @257:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subSubset[T](xs, ss, s))' VC for setSubSubSize @257:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @259:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @260:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @260:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSubSize[T](-[T](xs, s), ss))' VC for setSubSubSize @260:42...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSubSize[T](-[T](xs, s), ss))' VC for setSubSubSize @260:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @261:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @261:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @262:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @262:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSize[T](xs, s))' VC for setSubSubSize @262:42...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSize[T](xs, s))' VC for setSubSubSize @262:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @263:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for setSubSubSize @263:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @280:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @280:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @281:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @281:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys, p))' VC for subSubset @281:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys, p))' VC for subSubset @281:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @282:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @282:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](ys.list, p))' VC for subSubset @282:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](ys.list, p))' VC for subSubset @282:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @283:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @283:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for subSubset @283:18...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for subSubset @283:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @284:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @284:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](as, p))' VC for subSubset @284:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](as, p))' VC for subSubset @284:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](Set[T](as), p))' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](Set[T](as), p))' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @286:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subSubset @286:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subSubset[T](xs, Set[T](as), y))' VC for subSubset @286:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subSubset[T](xs, Set[T](as), y))' VC for subSubset @286:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for subsetOfSize @297:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call setSubSubSize[T](ys, xs))' VC for subsetOfSize @297:36...
[[34m  Info  [0m] Cache hit: 'precond. (call setSubSubSize[T](ys, xs))' VC for subsetOfSize @297:36...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for setSubSubSize @256:24...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for setSubSubSize @256:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOf @108:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOf @108:16...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for setSubSubSize @251:59...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for setSubSubSize @251:59...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setSubSubSize @255:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setSubSubSize @255:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subSubset @270:61...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subSubset @270:61...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subSubset @274:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subSubset @274:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subSubset @283:10...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subSubset @283:10...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @285:9...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @285:9...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @286:9...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @286:9...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for subSubset @286:51...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for subSubset @286:51...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfSize @293:58...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfSize @293:58...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueSubSize[T](xs.list, x))' VC for setSubSize @249:21...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueSubSize[T](xs.list, x))' VC for setSubSize @249:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for setSubSize @246:50...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for setSubSize @246:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @241:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @242:5...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueSubSize @242:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueCount[T](xs, x))' VC for uniqueSubSize @242:47...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueCount[T](xs, x))' VC for uniqueSubSize @242:47...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueSubSize @237:54...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueSubSize @237:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @217:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](unique[T](xs), (x$9: T) => { ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](unique[T](xs), (x$9: T) => { ...)' VC for uniqueCount @218:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @219:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @220:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @220:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$12: ...)' VC for uniqueCount @220:18...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$12: ...)' VC for uniqueCount @220:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @221:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @221:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$14: ...)' VC for uniqueCount @221:16...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$14: ...)' VC for uniqueCount @221:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @222:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @222:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @225:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](unique[T](xs), (x$15: T) => { ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](unique[T](xs), (x$15: T) => { ...)' VC for uniqueCount @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](::[T](-[T](unique[T](ys), y),  ...)' VC for uniqueCount @227:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$18: ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](-[T](unique[T](ys), y), (x$18: ...)' VC for uniqueCount @228:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @229:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @229:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subCount2[T](unique[T](ys), y, x))' VC for uniqueCount @229:59...
[[34m  Info  [0m] Cache hit: 'precond. (call subCount2[T](unique[T](ys), y, x))' VC for uniqueCount @229:59...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @230:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for uniqueCount @230:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueCount[T](ys, x))' VC for uniqueCount @230:59...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueCount[T](ys, x))' VC for uniqueCount @230:59...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueCount @209:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueCount @209:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueCount @213:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueCount @213:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount @194:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount @194:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount @194:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount @194:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount2 @199:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount2 @199:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount2 @199:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount2 @199:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount3 @205:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCount3 @205:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount3 @205:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCount3 @205:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call filter[T](xs, (x$8: T) => { ...)' VC for count @190:5...
[[34m  Info  [0m] Cache hit: 'precond. (call filter[T](xs, (x$8: T) => { ...)' VC for count @190:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @78:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @78:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](thiss.list, p))' VC for forall @102:42...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](thiss.list, p))' VC for forall @102:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forall @102:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forall @102:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m] Cache hit: 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for set @36:39...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for set @36:39...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for set @38:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m] Cache hit: 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m] Cache hit: 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @74:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for - @74:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                    ║
[[34m  Info  [0m] ║ [33mapply[0m  [33madt invariant[0m                                       [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:25:5[0m   [33m15.209[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m  [33mprecond. (call epsClosed[State, Sym](nfa, states))[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:30:13[0m  [33m15.206[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 326  valid: 324  (286 from cache) invalid: 0    unknown: 2    time:  64.103[0m                          ║
[[34m  Info  [0m] ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 69957 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
