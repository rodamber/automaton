[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @72:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @72:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @72:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @72:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for accepts @85:5...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for accepts @85:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @78:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @78:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for run @80:29...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for run @80:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @93:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @93:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @93:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @72:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @72:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for inv @72:1...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for inv @72:1:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for unapply @145:40...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for unapply @145:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @105:20...
[[34m  Info  [0m]  - Result for 'precond. (call map[T, Set[U]](thiss, f))' VC for flatMap @105:20:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for flatMap @104:18...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for flatMap @104:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call filter[T](ss, p))' VC for filter @109:32...
[[34m  Info  [0m]  - Result for 'precond. (call filter[T](ss, p))' VC for filter @109:32:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call filter[T](ss, p))' VC for filter @110:24...
[[34m  Info  [0m]  - Result for 'precond. (call filter[T](ss, p))' VC for filter @110:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for filter @107:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for filter @107:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for filter @108:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for filter @108:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for filter @109:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for filter @109:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call map[Set[T], Set[T]](ps, (x$5: Set[T]) => ...)' VC for powerSet @119:15...
[[34m  Info  [0m]  - Result for 'precond. (call map[Set[T], Set[T]](ps, (x$5: Set[T]) => ...)' VC for powerSet @119:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for powerSet @116:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for powerSet @116:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @62:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for dfaNfaEquiv @62:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @62:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @62:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @62:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @62:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @62:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for dfaNfaEquiv @62:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @62:7...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for dfaNfaEquiv @62:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @62:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @62:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @63:7...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](nfa, init, ...)' VC for dfaNfaEquiv @63:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @63:63...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @63:63:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @64:7...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @64:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @65:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[Set[State], Sym](dfa,  ...)' VC for dfaNfaEquiv @65:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for dfaNfaEquiv @66:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @57:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @57:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for dfaNfaEquiv @66:7...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for dfaNfaEquiv @66:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @127:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @127:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call map[T, U](thiss.list, f))' VC for map @102:39...
[[34m  Info  [0m]  - Result for 'precond. (call map[T, U](thiss.list, f))' VC for map @102:39:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for map @102:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for map @102:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:5...
[[34m  Info  [0m]  - Result for 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:5...
[[34m  Info  [0m]  - Result for 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:37...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Cons))' VC for existsAssoc @24:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:37...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](x$4, p), ind. on (l1: List[T] : Nil))' VC for existsAssoc @24:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on l1: List[T] / Cons)' VC for existsAssoc @23:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on l1: List[T] / Cons)' VC for existsAssoc @23:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on l1: List[T] / Nil)' VC for existsAssoc @23:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on l1: List[T] / Nil)' VC for existsAssoc @23:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for existsAssoc @23:48...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for existsAssoc @23:48:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for existsAssoc @490:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for existsAssoc @490:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for unapply @137:52...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for unapply @137:52:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @39:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @39:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @40:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @41:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @47:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State]](|[Set[State],  ...)' VC for lemma @47:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @47:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @47:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @47:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @47:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @47:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](|[ ...)' VC for lemma @47:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @47:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[Set[State], Set[State], Set[State]](== ...)' VC for lemma @47:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @47:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @47:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @48:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @49:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @50:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @50:49...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @50:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Set[State]]({ ...)' VC for lemma @51:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @28:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @28:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @37:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @37:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for lemma @48:19...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for lemma @48:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for lemma @49:19...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for lemma @49:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @22:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @22:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @92:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @92:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @24:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @24:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call exists[T](thiss.list, p))' VC for exists @92:42...
[[34m  Info  [0m]  - Result for 'precond. (call exists[T](thiss.list, p))' VC for exists @92:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for exists @92:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for exists @92:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for run @106:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for run @106:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @119:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @119:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for move @99:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for move @99:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for move @100:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for move @100:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for & @74:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for & @74:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for flatten @128:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for flatten @128:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'body assertion' VC for set @36:39...
[[34m  Info  [0m]  - Result for 'body assertion' VC for set @36:39:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for set @38:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for set @38:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for uniqueIdem @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for uniqueIdem @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for uniqueIdem @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @89:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @90:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @91:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @92:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @93:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for uniqueIdem @94:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for uniqueIdem @84:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for uniqueIdem @84:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for uniqueIdem @86:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for uniqueIdem @86:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Result for 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:4:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4...
[[34m  Info  [0m]  - Result for 'precond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:4:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Result for 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))' VC for forallAssoc @19:36:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36...
[[34m  Info  [0m]  - Result for 'precond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))' VC for forallAssoc @19:36:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on l1: List[T] / Cons)' VC for forallAssoc @18:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on l1: List[T] / Nil)' VC for forallAssoc @18:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for forallAssoc @18:48...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for forallAssoc @18:48:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for forallAssoc @484:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for forallAssoc @484:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @12:50:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @12:50:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @12:50...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @12:50:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @13:24...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @13:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @14:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @14:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @14:4...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @14:4:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @14:19...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @14:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @14:22...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @14:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for associative @14:29...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for associative @14:29:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call forall[T](that, (x: T) => { ...)' VC for subsetOf @95:5...
[[34m  Info  [0m]  - Result for 'precond. (call forall[T](that, (x: T) => { ...)' VC for subsetOf @95:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call forall[T](thiss.list, p))' VC for forall @90:42...
[[34m  Info  [0m]  - Result for 'precond. (call forall[T](thiss.list, p))' VC for forall @90:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for forall @90:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for forall @90:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call tailNotContains[T](l))' VC for isSet @21:9...
[[34m  Info  [0m]  - Result for 'precond. (call tailNotContains[T](l))' VC for isSet @21:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31...
[[34m  Info  [0m]  - Result for 'precond. (call uniqueNotContains[T](xs, x))' VC for isSet @21:31:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @22:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subCons[T](xs, x))' VC for isSet @22:42...
[[34m  Info  [0m]  - Result for 'precond. (call subCons[T](xs, x))' VC for isSet @22:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @23:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @24:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @25:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @26:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42...
[[34m  Info  [0m]  - Result for 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @26:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for isSet @27:11:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42...
[[34m  Info  [0m]  - Result for 'precond. (call subId[T](unique[T](xs), x))' VC for isSet @27:42:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for isSet @18:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for isSet @18:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for isSet @18:12...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for isSet @18:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for tailNotContains @46:49...
[[34m  Info  [0m]  - Result for 'postcondition' VC for tailNotContains @46:49:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for tailNotContains @49:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for tailNotContains @49:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subCons @34:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subCons @34:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for empty @13:26...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for empty @13:26:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subIdem @51:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subIdem @51:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @62:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @63:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @64:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @65:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @66:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @67:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43...
[[34m  Info  [0m]  - Result for 'precond. (call uniqueNotContains[T](-[T](xs, x), x))' VC for subUniqueComm @67:43:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45...
[[34m  Info  [0m]  - Result for 'precond. (call subId[T](unique[T](-[T](xs, x)), x))' VC for subUniqueComm @68:45:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T]](|[List[T], List[T],  ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](|[List[T],  ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call |[List[T], List[T], List[T]](==|[List[T] ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @71:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @72:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @73:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @74:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @75:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @76:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[List[T]]({ ...)' VC for subUniqueComm @77:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subUniqueComm @56:6...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subUniqueComm @56:6:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for subUniqueComm @58:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for subUniqueComm @58:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for uniqueNotContains @28:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for uniqueNotContains @28:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subComm @40:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subComm @40:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Cons)' VC for subId @45:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Now solving 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3...
[[34m  Info  [0m]  - Result for 'postcond. (ind. on xs: List[T] / Nil)' VC for subId @45:3:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mverification summary[0m ╞════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                                                                                                                ║
[[34m  Info  [0m] ║ [32m&[0m                  [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:74:5[0m                                                                                  [32m0.005[0m  ║
[[34m  Info  [0m] ║ [32maccepts[0m            [32mprecond. (call exists[State](run[State, Sym](thiss, sta ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:127:5[0m                                                                           [32m0.036[0m  ║
[[34m  Info  [0m] ║ [32maccepts[0m            [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:85:5[0m                                                                            [32m0.112[0m  ║
[[34m  Info  [0m] ║ [32mapply[0m              [32mprecond. (call exists[State](s, nfa.isFinal))[0m                                [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:22:40[0m                                                                           [32m0.018[0m  ║
[[34m  Info  [0m] ║ [32mapply[0m              [32madt invariant[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:24:5[0m                                                                            [32m1.071[0m  ║
[[34m  Info  [0m] ║ [32mapply[0m              [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:92:14[0m                                                                                 [32m0.012[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:12:50[0m                                                                           [32m0.007[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:12:50[0m                                                                           [32m0.014[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:12:50[0m                                                                           [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:13:24[0m                                                                           [32m0.014[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:14:4[0m                                                                            [32m0.011[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:14:19[0m                                                                           [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:14:22[0m                                                                           [32m0.011[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:14:22[0m                                                                           [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:14:29[0m                                                                           [32m0.012[0m  ║
[[34m  Info  [0m] ║ [32massociative[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:14:29[0m                                                                           [32m0.012[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mpostcondition[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:57:81[0m                                                                           [32m0.426[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:62:7[0m                                                                            [32m0.477[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:62:7[0m                                                                            [32m0.575[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:62:7[0m                                                                            [32m0.889[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:62:7[0m                                                                            [32m0.469[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:62:7[0m                                                                            [32m1.183[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call ==|[Boolean]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:63:7[0m                                                                            [32m0.397[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call exists[State](run[State, Sym](nfa, init, ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:63:7[0m                                                                            [32m0.044[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call lemma[State, Sym](nfa, init, word))[0m                           [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:63:63[0m                                                                           [32m0.051[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call exists[State](run[Set[State], Sym](dfa,  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:64:7[0m                                                                            [32m0.050[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call exists[State](run[Set[State], Sym](dfa,  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:65:7[0m                                                                            [32m0.042[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:66:7[0m                                                                            [32m0.049[0m  ║
[[34m  Info  [0m] ║ [32mdfaNfaEquiv[0m        [32mprecond. (call ==|[Boolean]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:66:7[0m                                                                            [32m0.047[0m  ║
[[34m  Info  [0m] ║ [32mempty[0m              [32madt invariant[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:13:26[0m                                                                                 [32m0.577[0m  ║
[[34m  Info  [0m] ║ [32mepsClosure[0m         [32mpostcondition[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:119:16[0m                                                                          [32m0.588[0m  ║
[[34m  Info  [0m] ║ [32mexists[0m             [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:92:14[0m                                                                                 [32m0.009[0m  ║
[[34m  Info  [0m] ║ [32mexists[0m             [32mprecond. (call exists[T](thiss.list, p))[0m                                     [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:92:42[0m                                                                                 [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32m../stainless/frontends/scalac/target/scala-2.11/classes/stainless/collection/List.scala:490:14[0m  [32m0.023[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mpostcond. (ind. on l1: List[T] / Cons)[0m                                       [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:23:3[0m                                                                            [32m0.095[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mpostcond. (ind. on l1: List[T] / Nil)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:23:3[0m                                                                            [32m0.077[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:23:48[0m                                                                           [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mprecond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))[0m  [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:24:5[0m                                                                            [32m0.049[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mprecond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))[0m   [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:24:5[0m                                                                            [32m0.030[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mprecond. (call exists[T](x$4, p), ind. on (l1: List[T] : Cons))[0m              [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:24:37[0m                                                                           [32m0.018[0m  ║
[[34m  Info  [0m] ║ [32mexistsAssoc[0m        [32mprecond. (call exists[T](x$4, p), ind. on (l1: List[T] : Nil))[0m               [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:24:37[0m                                                                           [32m0.015[0m  ║
[[34m  Info  [0m] ║ [32mfilter[0m             [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:107:14[0m                                                                                [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32mfilter[0m             [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:108:5[0m                                                                                 [32m0.026[0m  ║
[[34m  Info  [0m] ║ [32mfilter[0m             [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:109:24[0m                                                                                [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32mfilter[0m             [32mprecond. (call filter[T](ss, p))[0m                                             [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:109:32[0m                                                                                [32m0.102[0m  ║
[[34m  Info  [0m] ║ [32mfilter[0m             [32mprecond. (call filter[T](ss, p))[0m                                             [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:110:24[0m                                                                                [32m0.032[0m  ║
[[34m  Info  [0m] ║ [32mflatMap[0m            [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:104:18[0m                                                                                [32m0.012[0m  ║
[[34m  Info  [0m] ║ [32mflatMap[0m            [32mprecond. (call map[T, Set[U]](thiss, f))[0m                                     [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:105:20[0m                                                                                [32m0.018[0m  ║
[[34m  Info  [0m] ║ [32mflatten[0m            [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:128:5[0m                                                                                 [32m0.013[0m  ║
[[34m  Info  [0m] ║ [32mforall[0m             [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:90:14[0m                                                                                 [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32mforall[0m             [32mprecond. (call forall[T](thiss.list, p))[0m                                     [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:90:42[0m                                                                                 [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32m../stainless/frontends/scalac/target/scala-2.11/classes/stainless/collection/List.scala:484:14[0m  [32m0.020[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mpostcond. (ind. on l1: List[T] / Cons)[0m                                       [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:18:3[0m                                                                            [32m0.055[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mpostcond. (ind. on l1: List[T] / Nil)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:18:3[0m                                                                            [32m0.034[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:18:48[0m                                                                           [32m0.013[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mprecond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Cons))[0m  [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:19:4[0m                                                                            [32m0.043[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mprecond. (call associative[T, Boolean](l ..., ind. on (l1: List[T] : Nil))[0m   [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:19:4[0m                                                                            [32m0.021[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mprecond. (call forall[T](x$1, p), ind. on (l1: List[T] : Cons))[0m              [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:19:36[0m                                                                           [32m0.013[0m  ║
[[34m  Info  [0m] ║ [32mforallAssoc[0m        [32mprecond. (call forall[T](x$1, p), ind. on (l1: List[T] : Nil))[0m               [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:19:36[0m                                                                           [32m0.012[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:72:1[0m                                                                            [32m0.133[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:72:1[0m                                                                            [32m0.062[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:93:1[0m                                                                            [32m0.046[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:93:1[0m                                                                            [32m0.016[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:72:1[0m                                                                            [32m0.009[0m  ║
[[34m  Info  [0m] ║ [32minv[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:72:1[0m                                                                            [32m0.013[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mpostcondition[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:18:5[0m                                                                                  [32m1.043[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:18:12[0m                                                                                 [32m0.010[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call tailNotContains[T](l))[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:21:9[0m                                                                                  [32m0.568[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call uniqueNotContains[T](xs, x))[0m                                  [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:21:31[0m                                                                                 [32m0.026[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:11[0m                                                                                 [32m0.027[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:11[0m                                                                                 [32m0.625[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:11[0m                                                                                 [32m0.657[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:11[0m                                                                                 [32m0.776[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:11[0m                                                                                 [32m1.012[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:11[0m                                                                                 [32m1.395[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:11[0m                                                                                 [32m1.618[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call subCons[T](xs, x))[0m                                            [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:22:42[0m                                                                                 [32m0.031[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:23:11[0m                                                                                 [32m0.539[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:25:11[0m                                                                                 [32m0.029[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:27:11[0m                                                                                 [32m0.036[0m  ║
[[34m  Info  [0m] ║ [32misSet[0m              [32mprecond. (call subId[T](unique[T](xs), x))[0m                                   [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:27:42[0m                                                                                 [32m0.044[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mpostcondition[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:28:53[0m                                                                           [32m1.290[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:37:5[0m                                                                            [32m0.069[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State], Set[State]](== ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:39:9[0m                                                                            [32m0.666[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State], Set[State]](|[ ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:39:9[0m                                                                            [32m0.148[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State]](|[Set[State],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:39:9[0m                                                                            [32m0.786[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call ==|[Set[State]]({ ...)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:40:9[0m                                                                            [32m0.038[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call ==|[Set[State]]({ ...)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:41:9[0m                                                                            [32m0.074[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State], Set[State]](== ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:47:11[0m                                                                           [32m0.669[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State], Set[State]](|[ ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:47:11[0m                                                                           [32m0.592[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State], Set[State]](|[ ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:47:11[0m                                                                           [32m1.383[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State], Set[State]](|[ ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:47:11[0m                                                                           [32m0.735[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call |[Set[State], Set[State]](|[Set[State],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:47:11[0m                                                                           [32m1.593[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:49:19[0m                                                                           [32m0.050[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call ==|[Set[State]]({ ...)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:50:11[0m                                                                           [32m0.369[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call lemma[State, Sym](nfa, epsClosure[State, ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:50:49[0m                                                                           [32m0.086[0m  ║
[[34m  Info  [0m] ║ [32mlemma[0m              [32mprecond. (call ==|[Set[State]]({ ...)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:51:11[0m                                                                           [32m0.082[0m  ║
[[34m  Info  [0m] ║ [32mmap[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:102:14[0m                                                                                [32m0.011[0m  ║
[[34m  Info  [0m] ║ [32mmap[0m                [32mprecond. (call map[T, U](thiss.list, f))[0m                                     [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:102:39[0m                                                                                [32m0.011[0m  ║
[[34m  Info  [0m] ║ [32mmove[0m               [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:99:5[0m                                                                            [32m0.006[0m  ║
[[34m  Info  [0m] ║ [32mmove[0m               [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:100:24[0m                                                                          [32m0.025[0m  ║
[[34m  Info  [0m] ║ [32mpowerSet[0m           [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:116:5[0m                                                                                 [32m0.007[0m  ║
[[34m  Info  [0m] ║ [32mpowerSet[0m           [32mprecond. (call map[Set[T], Set[T]](ps, (x$5: Set[T]) => ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:119:15[0m                                                                                [32m0.027[0m  ║
[[34m  Info  [0m] ║ [32mrun[0m                [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:106:5[0m                                                                           [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32mrun[0m                [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:78:5[0m                                                                            [32m0.018[0m  ║
[[34m  Info  [0m] ║ [32mrun[0m                [32mlambda precondition[0m                                                          [32mvalid[0m  [32mnativez3[0m  [32mAutomaton.scala:80:29[0m                                                                           [32m0.047[0m  ║
[[34m  Info  [0m] ║ [32mset[0m                [32mbody assertion[0m                                                               [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:36:39[0m                                                                                 [32m0.473[0m  ║
[[34m  Info  [0m] ║ [32mset[0m                [32madt invariant[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:38:5[0m                                                                                  [32m4.735[0m  ║
[[34m  Info  [0m] ║ [32msubComm[0m            [32mpostcond. (ind. on xs: List[T] / Cons)[0m                                       [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:40:3[0m                                                                            [32m0.025[0m  ║
[[34m  Info  [0m] ║ [32msubComm[0m            [32mpostcond. (ind. on xs: List[T] / Nil)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:40:3[0m                                                                            [32m0.023[0m  ║
[[34m  Info  [0m] ║ [32msubCons[0m            [32mpostcond. (ind. on xs: List[T] / Cons)[0m                                       [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:34:3[0m                                                                            [32m0.036[0m  ║
[[34m  Info  [0m] ║ [32msubCons[0m            [32mpostcond. (ind. on xs: List[T] / Nil)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:34:3[0m                                                                            [32m0.029[0m  ║
[[34m  Info  [0m] ║ [32msubId[0m              [32mpostcond. (ind. on xs: List[T] / Cons)[0m                                       [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:45:3[0m                                                                            [32m0.028[0m  ║
[[34m  Info  [0m] ║ [32msubId[0m              [32mpostcond. (ind. on xs: List[T] / Nil)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:45:3[0m                                                                            [32m0.024[0m  ║
[[34m  Info  [0m] ║ [32msubIdem[0m            [32mpostcond. (ind. on xs: List[T] / Cons)[0m                                       [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:51:3[0m                                                                            [32m0.020[0m  ║
[[34m  Info  [0m] ║ [32msubIdem[0m            [32mpostcond. (ind. on xs: List[T] / Nil)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:51:3[0m                                                                            [32m0.018[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mpostcondition[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:56:6[0m                                                                            [32m10.542[0m ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:58:5[0m                                                                            [32m0.023[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:61:9[0m                                                                            [32m0.096[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:61:9[0m                                                                            [32m5.478[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:61:9[0m                                                                            [32m0.219[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:61:9[0m                                                                            [32m4.595[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:61:9[0m                                                                            [32m4.949[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:61:9[0m                                                                            [32m4.454[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:61:9[0m                                                                            [32m6.294[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:63:9[0m                                                                            [32m0.045[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:64:9[0m                                                                            [32m4.092[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:66:10[0m                                                                           [32m0.032[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:67:10[0m                                                                           [32m0.050[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call uniqueNotContains[T](-[T](xs, x), x))[0m                         [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:67:43[0m                                                                           [32m0.032[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call subId[T](unique[T](-[T](xs, x)), x))[0m                          [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:68:45[0m                                                                           [32m0.041[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:71:10[0m                                                                           [32m0.101[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:71:10[0m                                                                           [32m5.064[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:71:10[0m                                                                           [32m5.080[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:71:10[0m                                                                           [32m4.656[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:71:10[0m                                                                           [32m5.705[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:71:10[0m                                                                           [32m0.197[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:71:10[0m                                                                           [32m6.317[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:74:9[0m                                                                            [32m4.559[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:75:9[0m                                                                            [32m0.038[0m  ║
[[34m  Info  [0m] ║ [32msubUniqueComm[0m      [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:77:9[0m                                                                            [32m0.028[0m  ║
[[34m  Info  [0m] ║ [32msubsetOf[0m           [32mprecond. (call forall[T](that, (x: T) => { ...)[0m                              [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:95:5[0m                                                                                  [32m0.006[0m  ║
[[34m  Info  [0m] ║ [32mtailNotContains[0m    [32mpostcondition[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:46:49[0m                                                                                 [32m0.584[0m  ║
[[34m  Info  [0m] ║ [32mtailNotContains[0m    [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:49:5[0m                                                                                  [32m0.542[0m  ║
[[34m  Info  [0m] ║ [32munapply[0m            [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:137:52[0m                                                                                [32m0.007[0m  ║
[[34m  Info  [0m] ║ [32munapply[0m            [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mSet.scala:145:40[0m                                                                                [32m0.008[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mpostcondition[0m                                                                [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:84:5[0m                                                                            [32m4.988[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mmatch exhaustiveness[0m                                                         [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:86:5[0m                                                                            [32m0.011[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call |[List[T], List[T], List[T]](==|[List[T] ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:89:9[0m                                                                            [32m0.078[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:89:9[0m                                                                            [32m5.296[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:89:9[0m                                                                            [32m4.315[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:89:9[0m                                                                            [32m5.928[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call |[List[T], List[T], List[T]](|[List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:89:9[0m                                                                            [32m4.921[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call |[List[T], List[T]](|[List[T], List[T],  ...)[0m                 [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:89:9[0m                                                                            [32m6.369[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:91:9[0m                                                                            [32m4.123[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:92:9[0m                                                                            [32m0.469[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:93:9[0m                                                                            [32m0.021[0m  ║
[[34m  Info  [0m] ║ [32muniqueIdem[0m         [32mprecond. (call ==|[List[T]]({ ...)[0m                                           [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:94:9[0m                                                                            [32m0.016[0m  ║
[[34m  Info  [0m] ║ [32muniqueNotContains[0m  [32mpostcond. (ind. on xs: List[T] / Cons)[0m                                       [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:28:3[0m                                                                            [32m0.035[0m  ║
[[34m  Info  [0m] ║ [32muniqueNotContains[0m  [32mpostcond. (ind. on xs: List[T] / Nil)[0m                                        [32mvalid[0m  [32mnativez3[0m  [32mListSpecs.scala:28:3[0m                                                                            [32m0.014[0m  ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 160  valid: 160  (0 from cache) invalid: 0    unknown: 0    time: 141.343[0m                                                                                                                                        ║
[[34m  Info  [0m] ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 149672 ms
[[34m  Info  [0m] Shutting down executor service.
