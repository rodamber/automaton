[[33mWarning [0m] Parallelism is disabled.
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSet[T](x))' VC for powerSetSubset @466:5...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSet[T](x))' VC for powerSetSubset @466:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for powerSetSubset @464:60...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for powerSetSubset @464:60...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for powerSetSubset @464:60...
[[34m  Info  [0m]  - Result for 'postcondition' VC for powerSetSubset @464:60:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @343:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @343:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @343:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @343:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @344:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @344:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @344:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @344:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @344:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @344:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @341:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @341:65...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @331:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @331:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @331:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @331:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @333:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @333:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @333:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for sameExists @333:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @334:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @334:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @334:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for sameExists @334:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @329:79...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @329:79...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @329:51...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @329:51...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @293:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @293:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @294:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @294:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @299:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @299:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @299:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @299:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @299:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @299:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @299:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @299:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @299:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @299:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @299:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @299:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @300:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @300:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @301:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @301:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @301:20...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @301:20...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @301:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @301:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @302:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @302:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @302:12...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @302:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @302:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @302:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @302:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @302:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @303:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @303:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @305:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @305:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @305:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @305:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @305:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @305:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @305:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @305:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @306:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @306:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @306:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @306:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @306:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @306:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @307:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @307:11...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @291:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @291:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @291:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @291:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @296:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @296:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @298:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @298:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @300:11...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @300:11...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @301:12...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @301:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @230:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @230:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @230:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @230:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @230:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @230:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @230:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @230:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @230:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @230:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @230:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @230:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @228:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @228:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @228:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @228:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @228:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @228:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @230:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @230:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @348:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @348:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @353:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @354:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @354:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @354:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @354:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @354:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @354:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @354:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @354:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @354:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @354:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @355:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @355:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @355:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @355:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @355:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @355:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @346:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @346:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @350:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @350:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @428:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @428:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @428:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @428:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @429:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @429:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @426:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @426:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @410:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @410:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @410:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @410:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @410:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @410:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @410:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @410:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @415:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @415:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @415:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @415:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @417:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @417:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @417:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @417:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @417:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @418:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @418:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @418:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @418:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @418:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @418:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @418:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @418:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @418:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @418:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @418:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @418:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @419:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @419:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @419:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @419:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @419:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @419:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @419:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @419:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @420:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @420:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @420:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @420:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @420:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @420:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @421:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @421:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @421:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @421:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @414:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @414:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @408:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @408:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @412:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @412:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @403:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @403:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @403:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @403:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @405:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @405:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @405:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @405:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @405:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @405:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @405:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @405:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @405:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @405:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @405:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @405:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @403:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @403:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @401:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @401:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @401:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @401:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @322:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for sameTrans @322:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @322:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for sameTrans @322:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @319:76...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @319:76...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameSymm @324:60...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameSymm @324:60...
[[34m  Info  [0m]  - Checking cache: 'precond. (call foldLeft[T, R](xs, f(z, x), f))' VC for foldLeft @167:29...
[[34m  Info  [0m] Cache hit: 'precond. (call foldLeft[T, R](xs, f(z, x), f))' VC for foldLeft @167:29...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for foldLeft @164:25...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for foldLeft @164:25...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for foldLeft @165:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for foldLeft @165:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for foldLeft @167:41...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for foldLeft @167:41...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @384:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @384:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @389:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @389:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @389:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @389:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @389:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @389:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @389:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @389:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @389:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @389:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @390:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @390:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @390:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @390:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @390:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @390:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @390:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @390:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @390:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @390:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @391:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @391:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @391:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @391:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @391:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @391:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @382:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @382:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @386:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @386:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @99:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @99:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @104:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @104:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @104:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @104:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @105:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @105:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @105:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @105:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @107:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @107:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @107:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @107:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @103:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @103:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @105:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @105:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @109:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @109:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @101:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @101:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @101:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @101:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @433:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @433:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @433:17...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @433:17...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @431:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @431:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @431:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @431:73:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSet[T](xs))' VC for powerSet @117:18...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSet[T](xs))' VC for powerSet @117:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSetIsSound[T](xs))' VC for powerSet @119:16...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSetIsSound[T](xs))' VC for powerSet @119:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSetAllSound[T](xs))' VC for powerSet @120:16...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSetAllSound[T](xs))' VC for powerSet @120:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call mapAddIsSound[T](ps, x))' VC for powerSet @121:16...
[[34m  Info  [0m] Cache miss: 'precond. (call mapAddIsSound[T](ps, x))' VC for powerSet @121:16...
[[34m  Info  [0m]  - Now solving 'precond. (call mapAddIsSound[T](ps, x))' VC for powerSet @121:16...
[[34m  Info  [0m]  - Result for 'precond. (call mapAddIsSound[T](ps, x))' VC for powerSet @121:16:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[USet[T]](ps, mapAdd[T](ps, x)))' VC for powerSet @124:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[USet[T]](ps, mapAdd[T](ps, x)))' VC for powerSet @124:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call mapAdd[T](ps, x))' VC for powerSet @124:15...
[[34m  Info  [0m] Cache hit: 'precond. (call mapAdd[T](ps, x))' VC for powerSet @124:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSet[T](set))' VC for powerSetIsSound @456:18...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSet[T](set))' VC for powerSetIsSound @456:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[USet[T]](powerSet[T](set), (x$5:  ...)' VC for powerSetAllSound @461:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[USet[T]](powerSet[T](set), (x$5:  ...)' VC for powerSetAllSound @461:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSet[T](set))' VC for powerSetAllSound @461:5...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSet[T](set))' VC for powerSetAllSound @461:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @119:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @119:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @120:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @120:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @121:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @121:9...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for powerSet @114:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for powerSet @114:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for powerSetIsSound @454:51...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for powerSetIsSound @454:51...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for powerSetAllSound @459:52...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for powerSetAllSound @459:52...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for powerSetAllSound @459:52...
[[34m  Info  [0m]  - Result for 'postcondition' VC for powerSetAllSound @459:52:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @236:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @236:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @236:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @234:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @234:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @234:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @234:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[USet[T]](sets, (s: USet[T]) => { ...)' VC for mapAddIsSound @445:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[USet[T]](sets, (s: USet[T]) => { ...)' VC for mapAddIsSound @445:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call mapAdd[T](sets, x))' VC for mapAddIsSound @447:13...
[[34m  Info  [0m] Cache hit: 'precond. (call mapAdd[T](sets, x))' VC for mapAddIsSound @447:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[USet[T]](m, (x$4: USet[T]) => { ...)' VC for mapAddIsSound @448:5...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[USet[T]](m, (x$4: USet[T]) => { ...)' VC for mapAddIsSound @448:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for mapAddIsSound @444:62...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for mapAddIsSound @444:62...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for mapAddIsSound @444:62...
[[34m  Info  [0m]  - Result for 'postcondition' VC for mapAddIsSound @444:62:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @286:78...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTrans @286:78...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTrans @286:78...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTrans @286:78:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, R](set, f))' VC for mapIsSound @441:18...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, R](set, f))' VC for mapIsSound @441:18...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for mapIsSound @439:59...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for mapIsSound @439:59...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for mapIsSound @439:37...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for mapIsSound @439:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, R](xs, f))' VC for map @134:17...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, R](xs, f))' VC for map @134:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[R](m, f(x)))' VC for map @136:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[R](m, f(x)))' VC for map @136:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[R](m, f(x)))' VC for map @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[R](m, f(x)))' VC for map @137:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for map @136:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for map @136:9...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for map @128:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for map @128:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for map @131:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for map @131:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for map @136:30...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for map @136:30...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for map @137:13...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for map @137:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[USet[T]](sets, (s: USet[T]) => { ...)' VC for mapAdd @180:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[USet[T]](sets, (s: USet[T]) => { ...)' VC for mapAdd @180:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](s, x))' VC for mapAdd @186:16...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](s, x))' VC for mapAdd @186:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call mapAdd[T](ss, x))' VC for mapAdd @186:23...
[[34m  Info  [0m] Cache hit: 'precond. (call mapAdd[T](ss, x))' VC for mapAdd @186:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for mapAdd @184:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for mapAdd @184:26...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for mapAdd @182:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for mapAdd @182:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[T](xs, p))' VC for forall @45:35...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[T](xs, p))' VC for forall @45:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forall @43:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forall @43:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for forall @43:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for forall @43:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for forall @45:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for forall @45:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call prodIsSound[T, U](thiss, x))' VC for * @147:16...
[[34m  Info  [0m] Cache hit: 'precond. (call prodIsSound[T, U](thiss, x))' VC for * @147:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call prodIsSound[T, U](thiss, xs))' VC for * @148:16...
[[34m  Info  [0m] Cache hit: 'precond. (call prodIsSound[T, U](thiss, xs))' VC for * @148:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[(T, U)](*[T, U](thiss, x), *[T, U](th ...)' VC for * @149:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[(T, U)](*[T, U](thiss, x), *[T, U](th ...)' VC for * @149:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call *[T, U](thiss, x))' VC for * @149:10...
[[34m  Info  [0m] Cache hit: 'precond. (call *[T, U](thiss, x))' VC for * @149:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call *[T, U](thiss, xs))' VC for * @149:24...
[[34m  Info  [0m] Cache hit: 'precond. (call *[T, U](thiss, xs))' VC for * @149:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call *[T, U](set, xs))' VC for prodIsSound @484:18...
[[34m  Info  [0m] Cache hit: 'precond. (call *[T, U](set, xs))' VC for prodIsSound @484:18...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for * @146:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for * @146:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for * @148:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for * @148:9...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for * @144:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for * @144:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for prodIsSound @482:62...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for prodIsSound @482:62...
[[34m  Info  [0m]  - Checking cache: 'precond. (call prodIsSound[T, U](xs, u))' VC for * @159:16...
[[34m  Info  [0m] Cache hit: 'precond. (call prodIsSound[T, U](xs, u))' VC for * @159:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[(T, U)](*[T, U](xs, u), (x, u)))' VC for * @160:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[(T, U)](*[T, U](xs, u), (x, u)))' VC for * @160:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call *[T, U](xs, u))' VC for * @160:10...
[[34m  Info  [0m] Cache hit: 'precond. (call *[T, U](xs, u))' VC for * @160:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call *[T, U](set, u))' VC for prodIsSound @474:18...
[[34m  Info  [0m] Cache hit: 'precond. (call *[T, U](set, u))' VC for prodIsSound @474:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call prodIsSound[T, U](xs, u))' VC for prodIsSound @478:29...
[[34m  Info  [0m] Cache hit: 'precond. (call prodIsSound[T, U](xs, u))' VC for prodIsSound @478:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[(T, U)](*[T, U](xs, u), (x, u ...)' VC for prodIsSound @478:51...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[(T, U)](*[T, U](xs, u), (x, u ...)' VC for prodIsSound @478:51...
[[34m  Info  [0m]  - Checking cache: 'precond. (call *[T, U](xs, u))' VC for prodIsSound @478:62...
[[34m  Info  [0m] Cache hit: 'precond. (call *[T, U](xs, u))' VC for prodIsSound @478:62...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for * @158:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for * @158:26...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for * @156:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for * @156:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for prodIsSound @472:55...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for prodIsSound @472:55...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for prodIsSound @476:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for prodIsSound @476:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @74:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @74:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @79:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @79:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @79:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @79:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @80:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @80:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @80:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @80:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @82:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @82:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @82:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @82:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @78:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @78:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @80:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @80:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @84:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @84:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @76:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @76:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @76:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @76:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @210:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @210:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @217:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @217:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @217:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @217:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @217:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @217:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @217:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @218:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @218:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @218:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @218:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @219:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @219:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @219:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @219:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @219:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @219:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @220:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @220:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @220:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @220:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @220:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @220:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @221:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @221:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @208:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @208:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @212:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @212:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @205:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @205:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @205:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @205:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @203:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @203:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @203:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @203:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @53:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @53:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @55:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @55:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @51:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @51:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameRefl @316:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameRefl @316:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @271:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetRefl @271:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetRefl @273:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetRefl @273:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTail @280:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTail @280:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTail @280:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTail @280:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetTail @280:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetTail @280:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @364:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @364:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @364:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @364:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @362:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @362:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @362:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @362:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @250:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @250:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @258:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @258:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @258:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @258:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @258:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @258:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @258:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @258:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @258:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @258:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @258:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @258:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @259:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @259:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @259:34...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @259:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @260:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @260:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @260:14...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @260:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @260:50...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @260:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @260:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @260:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @261:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @261:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @261:13...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @261:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @261:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @261:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @248:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @248:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @253:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @253:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @245:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @245:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @245:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @245:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @243:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @243:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @243:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @243:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @93:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @93:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @89:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @89:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @371:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @371:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @371:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @371:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @374:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @374:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @67:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @67:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @60:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @60:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @194:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @194:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for mapAdd
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSet
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetAllSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for map
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for foldLeft
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSet[T](thiss.uset))' VC for powerSet @67:30...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSet[T](thiss.uset))' VC for powerSet @67:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSetAllSound[T](thiss.uset))' VC for powerSet @69:12...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSetAllSound[T](thiss.uset))' VC for powerSet @69:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call powerSetIsSound[T](thiss.uset))' VC for powerSet @70:12...
[[34m  Info  [0m] Cache hit: 'precond. (call powerSetIsSound[T](thiss.uset))' VC for powerSet @70:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call mapIsSound[USet[T], Set[T]](ups, (us: US ...)' VC for powerSet @78:12...
[[34m  Info  [0m] Cache miss: 'precond. (call mapIsSound[USet[T], Set[T]](ups, (us: US ...)' VC for powerSet @78:12...
[[34m  Info  [0m]  - Now solving 'precond. (call mapIsSound[USet[T], Set[T]](ups, (us: US ...)' VC for powerSet @78:12...
[[34m  Info  [0m]  - Result for 'precond. (call mapIsSound[USet[T], Set[T]](ups, (us: US ...)' VC for powerSet @78:12:
[[33mWarning [0m]  => INVALID
[[33mWarning [0m] Found counter-example:
[[33mWarning [0m]   thiss: Set[T] -> Set[T](USNil[T]())
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[USet[T], Set[T]](ups, (x$2: USet[T]) ...)' VC for powerSet @83:9...
[[34m  Info  [0m] Cache hit: 'precond. (call map[USet[T], Set[T]](ups, (x$2: USet[T]) ...)' VC for powerSet @83:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @69:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @69:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @70:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @70:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @73:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @73:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @78:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @78:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for powerSet @78:45...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for powerSet @78:45...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for powerSet @80:25...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for powerSet @80:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for powerSet @83:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for powerSet @83:5...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for powerSet @83:17...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for powerSet @83:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call *[T, U](thiss.uset, that.uset))' VC for * @88:45...
[[34m  Info  [0m] Cache hit: 'precond. (call *[T, U](thiss.uset, that.uset))' VC for * @88:45...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for * @88:41...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for * @88:41...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @100:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetRefl @100:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for sameExists @127:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for sameExists @127:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for sameExists @127:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for sameExists @127:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @128:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameExists[T](set1.uset, set2.uset, p))' VC for sameExists @128:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameExists @125:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameExists @125:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for sameExists @125:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for sameExists @125:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameRefl @112:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameRefl @112:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @139:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @139:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @138:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @138:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @147:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @147:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @144:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @144:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @106:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @106:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @103:75...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetTrans @103:75...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @152:19...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @152:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @149:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @149:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @135:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @135:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @134:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @134:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @118:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameTrans[T](set1.uset, set2.uset, set3. ...)' VC for sameTrans @118:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameTrans @115:73...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameTrans @115:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for + @52:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for + @52:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call foldLeft[T, R](thiss.uset, z, f))' VC for foldLeft @90:45...
[[34m  Info  [0m] Cache hit: 'precond. (call foldLeft[T, R](thiss.uset, z, f))' VC for foldLeft @90:45...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for foldLeft @90:25...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for foldLeft @90:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameSymm[T](set1.uset, set2.uset))' VC for sameSymm @123:19...
[[34m  Info  [0m] Cache hit: 'precond. (call sameSymm[T](set1.uset, set2.uset))' VC for sameSymm @123:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for sameSymm @120:58...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for sameSymm @120:58...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for - @59:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for - @59:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call map[T, R](thiss.uset, f))' VC for map @86:39...
[[34m  Info  [0m] Cache hit: 'precond. (call map[T, R](thiss.uset, f))' VC for map @86:39...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for map @86:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for map @86:14...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for map @86:35...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for map @86:35...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for map
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for mapAdd
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSet
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetAllSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for map
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for foldLeft
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$2: Sym) => { ...)' VC for dfaNfaEquiv @77:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$2: Sym) => { ...)' VC for dfaNfaEquiv @77:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call accepts[State, Sym](nfa, word))' VC for dfaNfaEquiv @78:5...
[[34m  Info  [0m] Cache hit: 'precond. (call accepts[State, Sym](nfa, word))' VC for dfaNfaEquiv @78:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @78:26...
[[34m  Info  [0m] Cache miss: 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @78:26...
[[34m  Info  [0m]  - Now solving 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @78:26...
[[34m  Info  [0m]  - Result for 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @78:26:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @80:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @80:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @80:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @80:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @81:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @81:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @81:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @81:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @83:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @83:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @83:5...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @83:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @84:7...
[[34m  Info  [0m] Cache miss: 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @84:7...
[[34m  Info  [0m]  - Now solving 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @84:7...
[[34m  Info  [0m]  - Result for 'precond. (call sameExists[State](run[State, Sym](nfa, i ...)' VC for dfaNfaEquiv @84:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @84:18...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @84:18...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @84:18...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @84:18:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @84:39...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @84:39...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @84:39...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @84:39:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @81:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @81:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @81:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @81:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @76:81...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @76:81...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @76:81...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @76:81:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$7: Sym) => { ...)' VC for accepts @188:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$7: Sym) => { ...)' VC for accepts @188:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @190:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @190:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @191:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @191:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @191:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @191:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for lemma @43:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for lemma @43:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @44:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @44:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @46:5...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @46:32...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @46:32...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @46:32...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @46:32:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @52:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @52:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @52:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @52:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @52:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @52:37:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @53:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:38...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:38...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:38...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:38:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @54:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @54:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @54:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @54:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @55:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @55:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @55:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](states, epsClosure[Stat ...)' VC for lemma @55:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @55:32...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @55:32...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @55:32...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @55:32:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @55:56...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @55:56...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @55:56...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @55:56:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @56:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @56:22:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @60:20...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @60:20...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @60:20...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @60:20:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @62:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @62:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @62:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @62:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @63:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @63:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @63:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @63:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @63:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @63:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @63:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @63:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @65:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @65:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @65:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @65:9:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @65:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @65:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @65:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @65:9:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @65:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @65:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @65:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @65:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @65:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @65:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @65:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @65:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @65:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @65:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @65:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @65:37:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @66:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @66:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @66:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @66:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @66:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @66:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @66:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @66:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @66:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @66:37:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @66:45...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @66:45...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @66:45...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @66:45:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @67:12...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @67:12...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @67:12...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @67:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @67:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @67:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @68:14...
[[34m  Info  [0m] Cache miss: 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @68:14...
[[34m  Info  [0m]  - Now solving 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @68:14...
[[34m  Info  [0m]  - Result for 'precond. (call sameTrans[State](run[State, Sym](nfa, st ...)' VC for lemma @68:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @68:24...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @68:24...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @68:24...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @68:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @69:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @69:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @69:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @69:22:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @69:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @69:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @69:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @69:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @70:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @70:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @70:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @70:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @70:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @70:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @71:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @71:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @71:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @71:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @71:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @71:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @71:45...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @71:45...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @62:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @62:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @62:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @62:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @63:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @63:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @63:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @63:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @41:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @41:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @41:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @41:53:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @50:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @50:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @50:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @50:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$5: Sym) => { ...)' VC for run @149:45...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$5: Sym) => { ...)' VC for run @149:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @151:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @151:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @153:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @153:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call moveValid[State, Sym](thiss, states, Som ...)' VC for run @155:16...
[[34m  Info  [0m] Cache hit: 'precond. (call moveValid[State, Sym](thiss, states, Som ...)' VC for run @155:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @156:9...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @156:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @156:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @156:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @155:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @155:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @158:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for run @158:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @150:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @150:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call foldLeft[(Set[State], Sym), Map[(Set[Sta ...)' VC for apply @25:7...
[[34m  Info  [0m] Cache miss: 'precond. (call foldLeft[(Set[State], Sym), Map[(Set[Sta ...)' VC for apply @25:7...
[[34m  Info  [0m]  - Now solving 'precond. (call foldLeft[(Set[State], Sym), Map[(Set[Sta ...)' VC for apply @25:7...
[[34m  Info  [0m]  - Result for 'precond. (call foldLeft[(Set[State], Sym), Map[(Set[Sta ...)' VC for apply @25:7:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @162:15...
[[34m  Info  [0m] Cache miss: 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @162:15...
[[34m  Info  [0m]  - Now solving 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @162:15...
[[34m  Info  [0m]  - Result for 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @162:15:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @28:22...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @28:22...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @28:22...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @28:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @34:24...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @34:24...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @34:24...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @34:24:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for apply @26:9...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for apply @26:9...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for apply @26:9...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for apply @26:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @48:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @37:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @37:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @37:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @37:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @123:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @123:1...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for inv @132:34...
[[34m  Info  [0m] Cache hit: 'map usage' VC for inv @132:34...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for inv @132:34...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for inv @132:34...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @89:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @89:1...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for inv @99:30...
[[34m  Info  [0m] Cache hit: 'map usage' VC for inv @99:30...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for inv @99:30...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for inv @99:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @238:5...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @238:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @238:33...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @238:33...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @238:48...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @238:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma2[S, W](nfa, states))' VC for epsClosureIdem @239:19...
[[34m  Info  [0m] Cache hit: 'precond. (call lemma2[S, W](nfa, states))' VC for epsClosureIdem @239:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosureIdem @236:69...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosureIdem @236:69...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosureIdem @236:69...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosureIdem @236:69:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for lemma2 @230:19...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for lemma2 @230:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[S, W](nfa, closure, None[W]()))' VC for lemma2 @231:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[S, W](nfa, closure, None[W]()))' VC for lemma2 @231:13...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma2 @227:61...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma2 @227:61...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma2 @227:61...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma2 @227:61:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @184:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @184:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$4: Sym) => { ...)' VC for accepts @114:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$4: Sym) => { ...)' VC for accepts @114:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, thiss.initialStat ...)' VC for accepts @115:13...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, thiss.initialStat ...)' VC for accepts @115:13...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @115:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @115:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @162:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @162:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @166:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @166:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call moveValid[State, Sym](thiss, states, Non ...)' VC for epsClosure @169:12...
[[34m  Info  [0m] Cache hit: 'precond. (call moveValid[State, Sym](thiss, states, Non ...)' VC for epsClosure @169:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @176:14...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @176:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @178:7...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @178:7...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @169:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @169:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @170:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @170:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @174:12...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @174:12...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @176:7...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @176:7...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @180:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for epsClosure @180:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @166:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @166:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[S, W](nfa, states, w))' VC for moveValid @212:5...
[[34m  Info  [0m] Cache hit: 'precond. (call move[S, W](nfa, states, w))' VC for moveValid @212:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call moveValid[S, W](nfa, xs, w))' VC for moveValid @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call moveValid[S, W](nfa, xs, w))' VC for moveValid @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[S, W](nfa, xs, w))' VC for moveValid @221:32...
[[34m  Info  [0m] Cache hit: 'precond. (call move[S, W](nfa, xs, w))' VC for moveValid @221:32...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for moveValid @215:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for moveValid @215:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for moveValid @217:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for moveValid @217:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @210:78...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @210:78...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @214:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @214:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for moveValid @217:16...
[[34m  Info  [0m] Cache hit: 'map usage' VC for moveValid @217:16...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for moveValid @217:16...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for moveValid @217:16...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for moveValid @220:32...
[[34m  Info  [0m] Cache hit: 'map usage' VC for moveValid @220:32...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for moveValid @220:32...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for moveValid @220:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @143:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @143:25...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @141:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for move @141:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @140:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @140:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @143:9...
[[34m  Info  [0m] Cache hit: 'map usage' VC for move @143:9...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @143:9...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for move @143:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call get[W](w))' VC for validSym @203:40...
[[34m  Info  [0m] Cache hit: 'precond. (call get[W](w))' VC for validSym @203:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for run @105:44...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for run @105:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, { ...)' VC for run @109:25...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, { ...)' VC for run @109:25...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @107:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @107:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for run @109:29...
[[34m  Info  [0m] Cache hit: 'map usage' VC for run @109:29...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for run @109:29...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for run @109:29...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for mapAdd
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for map
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for foldLeft
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSet
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetAllSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for mapAdd
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for map
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for foldLeft
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSet
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetAllSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing bitvector arguments lexicographically)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing bitvector arguments lexicographically)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for *
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for prodIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for mapAdd
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for map
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for foldLeft
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSet
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetAllSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for powerSetIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing bitvector arguments lexicographically)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                               ║
[[34m  Info  [0m] ║ [33mapply[0m                  [33mprecond. (call foldLeft[(Set[State], Sym), Map[(Set[Sta ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:25:7[0m    [33m20.271[0m ║
[[34m  Info  [0m] ║ [33mapply[0m                  [33madt invariant[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:37:5[0m    [33m20.322[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m            [33mprecond. (call accepts[Set[State], Sym](apply[State, Sy ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:78:26[0m   [33m20.963[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m            [33mprecond. (call run[Set[State], Sym](apply[State, Sym](n ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:84:39[0m   [33m21.337[0m ║
[[34m  Info  [0m] ║ [33mepsClosureIdem[0m         [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:236:69[0m  [33m20.246[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:41:53[0m   [33m21.351[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](apply[State, Sym](n ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:46:32[0m   [33m20.814[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:52:37[0m   [33m21.017[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:53:38[0m   [33m20.907[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:55:56[0m   [33m21.060[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:56:22[0m   [33m20.876[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:9[0m    [33m21.026[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:9[0m    [33m21.333[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:65:37[0m   [33m20.727[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:66:37[0m   [33m20.910[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)[0m  [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:69:22[0m   [33m20.482[0m ║
[[34m  Info  [0m] ║ [33mlemma2[0m                 [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mAutomaton.scala:227:61[0m  [33m20.404[0m ║
[[34m  Info  [0m] ║ [33mmapAddIsSound[0m          [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:444:62[0m       [33m20.072[0m ║
[[34m  Info  [0m] ║ [33mpowerSet[0m               [33mprecond. (call mapAddIsSound[T](ps, x))[0m                       [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:121:16[0m       [33m20.257[0m ║
[[34m  Info  [0m] ║ [31mpowerSet[0m               [31mprecond. (call mapIsSound[USet[T], Set[T]](ups, (us: US ...)[0m  [31minvalid[0m  [31mnativez3[0m  [31mSet.scala:78:12[0m         [31m0.414[0m  ║
[[34m  Info  [0m] ║ [33mpowerSetAllSound[0m       [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:459:52[0m       [33m20.589[0m ║
[[34m  Info  [0m] ║ [33mpowerSetSubset[0m         [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:464:60[0m       [33m20.615[0m ║
[[34m  Info  [0m] ║ [33mstrictSubsetIsSmaller[0m  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:431:73[0m       [33m20.057[0m ║
[[34m  Info  [0m] ║ [33msubsetTail[0m             [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:280:5[0m        [33m20.074[0m ║
[[34m  Info  [0m] ║ [33msubsetTrans[0m            [33mpostcondition[0m                                                 [33mtimeout[0m  [33mnativez3[0m  [33mUSet.scala:286:78[0m       [33m20.062[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 482  valid: 457  (416 from cache) invalid: 1    unknown: 24   time: 519.561[0m                                                     ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 100  valid: 100  (0 from cache) invalid: 0    unknown: 0    time: 121.165[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 655810 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
