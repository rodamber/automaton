[[33mWarning [0m] Parallelism is disabled.
[[33mWarning [0m] The Z3 native interface is not available. Falling back onto smt-z3.
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqSymm @244:58...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqSymm @244:58...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for isEmpty @31:26...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqRefl @236:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqRefl @236:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @348:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for subsetIsSmallerOrEqual @348:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @348:18...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for subsetIsSmallerOrEqual @348:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @349:21...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set2, set1))' VC for subsetIsSmallerOrEqual @349:21...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @346:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @346:74...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @330:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @330:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @330:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @330:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @330:28...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @330:28...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @330:40...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @330:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @335:17...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @335:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @335:49...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, y))' VC for diffSubsetSize @335:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt](|[BigInt, BigInt, BigI ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](|[BigInt, BigI ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[BigInt, BigInt, BigInt](==|[BigInt]({ ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @337:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @337:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, set2)))' VC for diffSubsetSize @337:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @337:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffSubsetSize @337:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @338:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @338:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @338:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](--[T](set1, ys), y)))' VC for diffSubsetSize @338:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @338:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffSubsetSize @338:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @338:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @338:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @338:37...
[[34m  Info  [0m] Cache hit: 'precond. (call subDecSize[T](--[T](set1, ys), y))' VC for diffSubsetSize @338:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @338:48...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @338:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @339:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @339:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @339:10...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](--[T](set1, ys)))' VC for diffSubsetSize @339:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @339:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffSubsetSize @339:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @339:37...
[[34m  Info  [0m] Cache hit: 'precond. (call diffSubsetSize[T](set1, ys))' VC for diffSubsetSize @339:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @340:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[BigInt]({ ...)' VC for diffSubsetSize @340:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @340:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @340:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for diffSubsetSize @340:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for diffSubsetSize @340:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for diffSubsetSize @341:9...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for diffSubsetSize @341:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for diffSubsetSize @341:21...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for diffSubsetSize @341:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for diffSubsetSize @334:29...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for diffSubsetSize @334:29...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffSubsetSize @328:66...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffSubsetSize @328:66...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffSubsetSize @332:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffSubsetSize @332:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @323:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @323:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @323:12...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @323:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @325:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USCons))' VC for subDecSize @325:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @325:6...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](-[T](set, y)), ind. on (set: USet[T] : USNil))' VC for subDecSize @325:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @325:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subDecSize @325:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @325:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subDecSize @325:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @325:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USCons))' VC for subDecSize @325:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @325:23...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set), ind. on (set: USet[T] : USNil))' VC for subDecSize @325:23...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for subDecSize @323:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for subDecSize @323:5...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @321:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subDecSize @321:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @321:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subDecSize @321:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @304:6...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @304:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for diffContains @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for diffContains @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for diffContains @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, set2))' VC for diffContains @309:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, set2))' VC for diffContains @309:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @310:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @310:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @310:10...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](set1, ys), y))' VC for diffContains @310:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @310:11...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @310:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @310:44...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](--[T](set1, ys), y, z))' VC for diffContains @310:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @310:57...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @310:57...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @311:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for diffContains @311:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](set1, ys))' VC for diffContains @311:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](set1, ys))' VC for diffContains @311:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @311:44...
[[34m  Info  [0m] Cache hit: 'precond. (call diffContains[T](set1, ys, z))' VC for diffContains @311:44...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for diffContains @302:70...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for diffContains @302:70...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for diffContains @306:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for diffContains @306:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @94:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](--[T](thiss, ys), y))' VC for -- @99:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @99:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](ys))' VC for -- @100:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](that))' VC for -- @100:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](--[T](thiss, ys), y))' VC for -- @102:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss, ys))' VC for -- @102:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @98:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for -- @100:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for -- @104:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for -- @96:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @170:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @178:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y))' VC for subIsSound @178:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @179:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @179:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @180:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @180:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @180:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](xs, y))' VC for subIsSound @180:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subIsSound @181:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for subIsSound @181:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subContains1[T](xs, y, x))' VC for subIsSound @181:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subIsSound @168:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subIsSound @173:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @263:19...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @263:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @263:50...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @263:50...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @264:21...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1, set2, ++ ...)' VC for subsetOfUnion @264:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @264:56...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @264:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @264:84...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for subsetOfUnion @264:84...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @261:65...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetOfUnion @261:65...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetRefl @191:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetRefl @193:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetRefl @193:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTail @200:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTail @200:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTail @200:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTail @200:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetTail @200:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetTail @200:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USCons))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](set, y), ind. on (set: USet[T] : USNil))' VC for subContains1 @165:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for subContains1 @163:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](xs, y))' VC for - @88:24...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for - @84:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @353:5...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set1))' VC for strictSubsetIsSmaller @353:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @353:17...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](set2))' VC for strictSubsetIsSmaller @353:17...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @351:73...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for strictSubsetIsSmaller @351:73...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for strictSubsetIsSmaller @351:73...
[[34m  Info  [0m]  - Result for 'postcondition' VC for strictSubsetIsSmaller @351:73:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @251:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @251:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @251:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @251:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @253:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @253:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @253:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set1, set2, p))' VC for eqExists @253:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @254:14...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @254:14...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @254:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](set2, set1, p))' VC for eqExists @254:30...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @249:77...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqExists @249:77...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @249:49...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @249:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @242:21...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1, set2, set3))' VC for eqTrans @242:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @242:54...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set3, set2, set1))' VC for eqTrans @242:54...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqTrans @239:74...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqTrans @239:74...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @206:78...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetTrans @206:78...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetTrans @206:78...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetTrans @206:78:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @291:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for tailContains @291:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @291:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for tailContains @291:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for tailContains @294:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for tailContains @294:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:38...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @213:38...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @214:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @214:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for subsetExists @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @219:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @219:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @220:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @220:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @221:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @221:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @221:20...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @221:20...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @221:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addExists[T](set2, x, p))' VC for subsetExists @221:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @222:12...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @222:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @222:12...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set2, x), p))' VC for subsetExists @222:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set2, x))' VC for subsetExists @222:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set2, x))' VC for subsetExists @222:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addId[T](set2, x))' VC for subsetExists @222:40...
[[34m  Info  [0m] Cache hit: 'precond. (call addId[T](set2, x))' VC for subsetExists @222:40...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @223:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @223:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @225:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for subsetExists @225:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @225:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for subsetExists @225:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @225:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @225:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for subsetExists @225:9...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for subsetExists @225:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for subsetExists @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for subsetExists @226:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for subsetExists @226:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @226:30...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetExists[T](xs, set2, p))' VC for subsetExists @226:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for subsetExists @227:11...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for subsetExists @227:11...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetExists @211:81...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetExists @211:81...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @211:53...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @211:53...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetExists @216:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetExists @216:5...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @218:33...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @218:33...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @220:11...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @220:11...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for subsetExists @221:12...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for subsetExists @221:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](+[T](set, x), p ..., ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addExists @150:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USCons))' VC for addExists @150:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set, p), ind. on (set: USet[T] : USNil))' VC for addExists @150:37...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addExists @148:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addExists @148:3...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @148:40...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for addExists @150:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](xs, p))' VC for exists @40:35...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @38:14...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for exists @38:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @40:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USCons))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, x), ind. on (set: USet[T] : USNil))' VC for addId @156:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for addId @154:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for addId @154:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @268:54...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @268:54...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](set1, set2))' VC for unionOfSubsetsIsSubset @273:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @274:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @274:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @274:10...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, set2), x))' VC for unionOfSubsetsIsSubset @274:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @274:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @274:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @274:63...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetAdd[T](++[T](xs, set2), set3, x))' VC for unionOfSubsetsIsSubset @274:63...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @274:73...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @274:73...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @275:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for unionOfSubsetsIsSubset @275:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @275:11...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, set2))' VC for unionOfSubsetsIsSubset @275:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @275:63...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](xs, set2, set3 ...)' VC for unionOfSubsetsIsSubset @275:63...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @266:89...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @266:89...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @270:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unionOfSubsetsIsSubset @270:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @284:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USCons))' VC for subsetAdd @284:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @284:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set1, x), ind. on (set1: USet[T] : USNil))' VC for subsetAdd @284:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @282:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USCons)' VC for subsetAdd @282:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @282:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set1: USet[T] / USNil)' VC for subsetAdd @282:3...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for subsetOf @19:42...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @69:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](++[T](xs, that), x))' VC for ++ @74:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @74:27...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for ++ @75:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss))' VC for ++ @75:26...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](++[T](xs, that), x))' VC for ++ @77:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](xs, that))' VC for ++ @77:10...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @73:26...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for ++ @75:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for ++ @79:16...
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for ++ @71:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](xs))' VC for size @48:33...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:16...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:16...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for size @46:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @130:18...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](|[Boolean,  ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @137:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y))' VC for addIsSound @137:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @138:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @138:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @139:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @139:48...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](xs, y))' VC for addIsSound @139:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @140:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for addIsSound @140:11...
[[34m  Info  [0m]  - Checking cache: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m] Cache hit: 'precond. (call containsDistAdd[T](xs, y, x))' VC for addIsSound @140:61...
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m] Cache hit: 'precond. (call ==|[Boolean]({ ...)' VC for addIsSound @141:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for addIsSound @128:52...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for addIsSound @132:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USCons))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](set, y), ind. on (set: USet[T] : USNil))' VC for containsDistAdd @125:6...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USCons)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Checking cache: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m] Cache hit: 'postcond. (ind. on set: USet[T] / USNil)' VC for containsDistAdd @123:3...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](xs, y))' VC for + @62:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for + @55:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for setInvariant @114:48...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for contains @14:33...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for * @73:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for * @73:5...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @13:32...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for apply @14:28...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for powerSet @68:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for powerSet @68:5...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for unapply @18:54...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for unapply @20:36...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqSymm[T](set1.uset, set2.uset))' VC for eqSymm @112:19...
[[34m  Info  [0m] Cache hit: 'precond. (call eqSymm[T](set1.uset, set2.uset))' VC for eqSymm @112:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqSymm @109:56...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqSymm @109:56...
[[34m  Info  [0m]  - Checking cache: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m] Cache hit: 'precond. (call --[T](thiss.uset, that.uset))' VC for -- @64:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for -- @64:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @124:19...
[[34m  Info  [0m] Cache hit: 'precond. (call unionOfSubsetsIsSubset[T](set1.uset, set ...)' VC for unionOfSubsetsIsSubset @124:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for unionOfSubsetsIsSubset @123:5...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for unionOfSubsetsIsSubset @123:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @60:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m] Cache hit: 'precond. (call subIsSound[T](thiss.uset, y))' VC for - @60:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m] Cache hit: 'precond. (call -[T](thiss.uset, y))' VC for - @61:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for - @59:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for - @59:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for - @61:5...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetRefl @89:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetRefl @89:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetRefl @89:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetRefl @89:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @128:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetOfUnion[T](set1.uset, set2.uset))' VC for subsetOfUnion @128:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetOfUnion @127:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for subsetOfUnion @127:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for subsetOfUnion @127:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for subsetOfUnion @127:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m] Cache hit: 'precond. (call ++[T](thiss.uset, that.uset))' VC for ++ @57:38...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for ++ @57:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @53:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m] Cache hit: 'precond. (call addIsSound[T](thiss.uset, y))' VC for + @53:43...
[[34m  Info  [0m]  - Checking cache: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m] Cache hit: 'precond. (call +[T](thiss.uset, y))' VC for + @54:9...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for + @52:25...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for + @52:25...
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m] Cache hit: 'adt invariant' VC for + @54:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @141:19...
[[34m  Info  [0m] Cache hit: 'precond. (call strictSubsetIsSmaller[T](set1.uset, set2 ...)' VC for strictSubsetIsSmaller @141:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for strictSubsetIsSmaller @138:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for strictSubsetIsSmaller @138:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set1, p))' VC for eqExists @116:5...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set1, p))' VC for eqExists @116:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](set2, p))' VC for eqExists @116:23...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](set2, p))' VC for eqExists @116:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @117:19...
[[34m  Info  [0m] Cache hit: 'precond. (call eqExists[T](set1.uset, set2.uset, p))' VC for eqExists @117:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqExists @114:75...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqExists @114:75...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for eqExists @114:47...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for eqExists @114:47...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m] Cache hit: 'precond. (call exists[T](thiss.uset, p))' VC for exists @48:42...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for exists @48:14...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqRefl @101:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for eqRefl @101:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for eqRefl @101:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for eqRefl @101:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @107:19...
[[34m  Info  [0m] Cache hit: 'precond. (call eqTrans[T](set1.uset, set2.uset, set3.us ...)' VC for eqTrans @107:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for eqTrans @104:71...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for eqTrans @104:71...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @95:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetTrans[T](set1.uset, set2.uset, set ...)' VC for subsetTrans @95:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetTrans @92:75...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetTrans @92:75...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @136:19...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[T](set1.uset, set ...)' VC for subsetIsSmallerOrEqual @136:19...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for subsetIsSmallerOrEqual @133:72...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for subsetIsSmallerOrEqual @133:72...
[[34m  Info  [0m]  - Checking cache: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m] Cache hit: 'precond. (call size[T](thiss.uset))' VC for size @50:24...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for size @50:47...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @86:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @86:1...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for inv @96:30...
[[34m  Info  [0m] Cache hit: 'map usage' VC for inv @96:30...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for inv @96:30...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for inv @96:30...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for inv @120:1...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for inv @120:1...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for inv @129:34...
[[34m  Info  [0m] Cache hit: 'map usage' VC for inv @129:34...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for inv @129:34...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for inv @129:34...
[[34m  Info  [0m]  - Checking cache: 'precond. (call accepts[State, Sym](nfa, word))' VC for dfaNfaEquiv @75:5...
[[34m  Info  [0m] Cache miss: 'precond. (call accepts[State, Sym](nfa, word))' VC for dfaNfaEquiv @75:5...
[[34m  Info  [0m]  - Now solving 'precond. (call accepts[State, Sym](nfa, word))' VC for dfaNfaEquiv @75:5...
[[31m Error  [0m] Quantification ¬validInput[State, Sym](x$5811, x$5781, x$5804) || subsetOf[State]({
[[31m Error  [0m]   assume(x$5810.move((x$5781, x$5804)).isInstanceOf[Some[Set[State]]])
[[31m Error  [0m]   x$5808.move((x$5781, x$5804)).asInstanceOf[Some[Set[State]]].v
[[31m Error  [0m] }, x$5809) does not fit in supported fragment.
[[31m Error  [0m]   Reason: Can't guarantee model for complex matchers.
[[31m Error  [0m] Model obtained was:
[[31m Error  [0m]   nfa: NFA[State, Sym] -> NFA[State, Sym](Set[Sym](USNil[Sym]()), Set[State](USCons[State](State#6, USCons[State](State#23, USNil[State]()))), {(State#4, None[Sym]()) -> Some[Set[State]](Set[State](USNil[State]())), * -> Some[Set[State]](Set[State](USCons[State](State#30, USCons[State](State#24, USCons[State](State#25, USNil[State]())))))}, State#6, (x$5888: State) => if (x$5888 == State#31) {
[[31m Error  [0m]     true
[[31m Error  [0m]   } else {
[[31m Error  [0m]     true
[[31m Error  [0m]   })
[[31m Error  [0m]   word: List[Sym]      -> Cons[Sym](Sym#34, Cons[Sym](Sym#39, Nil[Sym]()))
[[34m  Info  [0m]  - Result for 'precond. (call accepts[State, Sym](nfa, word))' VC for dfaNfaEquiv @75:5:
[[33mWarning [0m]  => UNKNOWN
[[34m  Info  [0m]  - Checking cache: 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @75:26...
[[34m  Info  [0m] Cache miss: 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @75:26...
[[34m  Info  [0m]  - Now solving 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @75:26...
[[34m  Info  [0m]  - Result for 'precond. (call accepts[Set[State], Sym](apply[State, Sy ...)' VC for dfaNfaEquiv @75:26:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @77:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @77:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @77:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for dfaNfaEquiv @77:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @78:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @78:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @78:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, apply[St ...)' VC for dfaNfaEquiv @78:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @80:5...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @80:5...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @80:5...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @80:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @81:7...
[[34m  Info  [0m] Cache miss: 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @81:7...
[[34m  Info  [0m]  - Now solving 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @81:7...
[[34m  Info  [0m]  - Result for 'precond. (call eqExists[State](run[State, Sym](nfa, ini ...)' VC for dfaNfaEquiv @81:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @81:16...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @81:16...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @81:16...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, init, word))' VC for dfaNfaEquiv @81:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @81:37...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @81:37...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @81:37...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for dfaNfaEquiv @81:37:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for dfaNfaEquiv @78:5...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for dfaNfaEquiv @78:5...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for dfaNfaEquiv @78:5...
[[34m  Info  [0m]  - Result for 'body assertion' VC for dfaNfaEquiv @78:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for dfaNfaEquiv @75:5...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for dfaNfaEquiv @75:5...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for dfaNfaEquiv @75:5...
[[34m  Info  [0m]  - Result for 'postcondition' VC for dfaNfaEquiv @75:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$2: Sym) => { ...)' VC for accepts @111:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$2: Sym) => { ...)' VC for accepts @111:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, thiss.initialStat ...)' VC for accepts @112:13...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, thiss.initialStat ...)' VC for accepts @112:13...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for accepts @112:5...
[[34m  Info  [0m] Cache hit: 'lambda precondition' VC for accepts @112:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:49...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @42:49...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @44:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @44:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @44:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @44:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @44:30...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @44:30...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @44:30...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](apply[State, Sym](n ...)' VC for lemma @44:30:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @50:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @50:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @50:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @50:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @50:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @50:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @50:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @50:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @50:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @50:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @50:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @50:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @50:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @50:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @50:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @50:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @50:35...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @50:35...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @50:35...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @50:35:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @51:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @51:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @51:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @51:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @51:10...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @51:10...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @51:10...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @51:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @51:36...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @51:36...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @51:36...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @51:36:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @52:12...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @52:12...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @52:12...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, states))' VC for lemma @52:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @53:14...
[[34m  Info  [0m] Cache miss: 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @53:14...
[[34m  Info  [0m]  - Now solving 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @53:14...
[[34m  Info  [0m]  - Result for 'precond. (call eqTrans[State](states, epsClosure[State, ...)' VC for lemma @53:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, states))' VC for lemma @53:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:54...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:54...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:54...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @53:54:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @54:20...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @54:20...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @54:20...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @54:20:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @58:20...
[[34m  Info  [0m] Cache miss: 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @58:20...
[[34m  Info  [0m]  - Now solving 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @58:20...
[[34m  Info  [0m]  - Result for 'precond. (call move[State, Sym](nfa, states, Some[Sym]( ...)' VC for lemma @58:20:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @60:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @60:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @60:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosureIdem[State, Sym](nfa, step))' VC for lemma @60:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @61:16...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @61:16...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @61:16...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosed[State, Sym](nfa, epsClosure[St ...)' VC for lemma @61:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @61:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @61:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @61:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @61:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @63:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @63:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @63:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean](|[Boolean, Boolean,  ...)' VC for lemma @63:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @63:9...
[[34m  Info  [0m] Cache miss: 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @63:9...
[[34m  Info  [0m]  - Now solving 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @63:9...
[[34m  Info  [0m]  - Result for 'precond. (call |[Boolean, Boolean, Boolean](==|[Boolean ...)' VC for lemma @63:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @63:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @63:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @63:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @63:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @63:10...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @63:10...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @63:10...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @63:10:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @63:35...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @63:35...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @63:35...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, states, word))' VC for lemma @63:35:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @64:9...
[[34m  Info  [0m] Cache miss: 'precond. (call ==|[Boolean]({ ...)' VC for lemma @64:9...
[[34m  Info  [0m]  - Now solving 'precond. (call ==|[Boolean]({ ...)' VC for lemma @64:9...
[[34m  Info  [0m]  - Result for 'precond. (call ==|[Boolean]({ ...)' VC for lemma @64:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @64:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @64:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @64:35...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @64:35...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @64:35...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @64:35:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @64:43...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @64:43...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @64:43...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @64:43:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @65:12...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @65:12...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @65:12...
[[34m  Info  [0m]  - Result for 'precond. (call lemma[State, Sym](nfa, epsClosure[State, ...)' VC for lemma @65:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @65:23...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @65:23...
[[34m  Info  [0m]  - Checking cache: 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @66:14...
[[34m  Info  [0m] Cache miss: 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @66:14...
[[34m  Info  [0m]  - Now solving 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @66:14...
[[34m  Info  [0m]  - Result for 'precond. (call eqTrans[State](run[State, Sym](nfa, stat ...)' VC for lemma @66:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @66:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @66:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @66:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @66:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @67:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @67:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @67:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[Set[State], Sym](dfa, epsClosure[Sta ...)' VC for lemma @67:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @67:30...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @67:30...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @67:30...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @67:30:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @68:22...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @68:22...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @68:22...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @68:22:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @68:30...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @68:30...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @69:10...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](nfa, states, word))' VC for lemma @69:10...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @69:35...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @69:35...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @69:35...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](nfa, epsClosure[State, S ...)' VC for lemma @69:35:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @69:43...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, step))' VC for lemma @69:43...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @60:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @60:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @60:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @60:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for lemma @61:9...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for lemma @61:9...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for lemma @61:9...
[[34m  Info  [0m]  - Result for 'body assertion' VC for lemma @61:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma @41:53...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma @41:53...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma @41:53...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma @41:53:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for lemma @48:5...
[[34m  Info  [0m] Cache miss: 'match exhaustiveness' VC for lemma @48:5...
[[34m  Info  [0m]  - Now solving 'match exhaustiveness' VC for lemma @48:5...
[[34m  Info  [0m]  - Result for 'match exhaustiveness' VC for lemma @48:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @159:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](move[State ...)' VC for apply @159:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @28:22...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, move[State,  ...)' VC for apply @28:22...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](nfa, s, Some[Sym](w)))' VC for apply @28:37...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @34:24...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](nfa, apply[State] ...)' VC for apply @34:24...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](s, nfa.isFinal))' VC for apply @35:40:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for apply @26:9...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for apply @26:9...
[[34m  Info  [0m]  - Checking cache: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m] Cache miss: 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Now solving 'lambda precondition' VC for apply @48:14...
[[34m  Info  [0m]  - Result for 'lambda precondition' VC for apply @48:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'adt invariant' VC for apply @37:5...
[[34m  Info  [0m] Cache miss: 'adt invariant' VC for apply @37:5...
[[34m  Info  [0m]  - Now solving 'adt invariant' VC for apply @37:5...
[[34m  Info  [0m]  - Result for 'adt invariant' VC for apply @37:5:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @235:5...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @235:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @235:31...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @235:31...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @235:31...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[S, W](nfa, epsClosure[S, W](n ...)' VC for epsClosureIdem @235:31:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @235:46...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for epsClosureIdem @235:46...
[[34m  Info  [0m]  - Checking cache: 'precond. (call lemma2[S, W](nfa, states))' VC for epsClosureIdem @236:19...
[[34m  Info  [0m] Cache miss: 'precond. (call lemma2[S, W](nfa, states))' VC for epsClosureIdem @236:19...
[[34m  Info  [0m]  - Now solving 'precond. (call lemma2[S, W](nfa, states))' VC for epsClosureIdem @236:19...
[[34m  Info  [0m]  - Result for 'precond. (call lemma2[S, W](nfa, states))' VC for epsClosureIdem @236:19:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosureIdem @233:69...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosureIdem @233:69...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosureIdem @233:69...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosureIdem @233:69:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @181:15...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for epsClosed @181:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @102:44...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$1: Sym) => { ...)' VC for run @102:44...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, { ...)' VC for run @106:25...
[[34m  Info  [0m] Cache hit: 'precond. (call run[State, Sym](thiss, { ...)' VC for run @106:25...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @104:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @104:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for run @106:29...
[[34m  Info  [0m] Cache hit: 'map usage' VC for run @106:29...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for run @106:29...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for run @106:29...
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$5: Sym) => { ...)' VC for accepts @185:13...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$5: Sym) => { ...)' VC for accepts @185:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @187:17...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, apply[Stat ...)' VC for accepts @187:17...
[[34m  Info  [0m]  - Checking cache: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @188:5...
[[34m  Info  [0m] Cache miss: 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @188:5...
[[34m  Info  [0m]  - Now solving 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @188:5...
[[34m  Info  [0m]  - Result for 'precond. (call exists[State](run[State, Sym](thiss, sta ...)' VC for accepts @188:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @188:5...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @188:5...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @188:5...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, start, word))' VC for accepts @188:5:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[S, W](nfa, states))' VC for lemma2 @227:19...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[S, W](nfa, states))' VC for lemma2 @227:19...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[S, W](nfa, closure, None[W]()))' VC for lemma2 @228:13...
[[34m  Info  [0m] Cache miss: 'precond. (call move[S, W](nfa, closure, None[W]()))' VC for lemma2 @228:13...
[[34m  Info  [0m]  - Now solving 'precond. (call move[S, W](nfa, closure, None[W]()))' VC for lemma2 @228:13...
[[34m  Info  [0m]  - Result for 'precond. (call move[S, W](nfa, closure, None[W]()))' VC for lemma2 @228:13:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for lemma2 @224:61...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for lemma2 @224:61...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for lemma2 @224:61...
[[34m  Info  [0m]  - Result for 'postcondition' VC for lemma2 @224:61:
[[33mWarning [0m]  => TIMEOUT
[[34m  Info  [0m]  - Checking cache: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for run @146:45...
[[34m  Info  [0m] Cache hit: 'precond. (call forall[Sym](word, (x$3: Sym) => { ...)' VC for run @146:45...
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @148:21...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, states))' VC for run @148:21...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @150:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, Some[Sym ...)' VC for run @150:25...
[[34m  Info  [0m]  - Checking cache: 'precond. (call moveValid[State, Sym](thiss, states, Som ...)' VC for run @152:16...
[[34m  Info  [0m] Cache hit: 'precond. (call moveValid[State, Sym](thiss, states, Som ...)' VC for run @152:16...
[[34m  Info  [0m]  - Checking cache: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @153:9...
[[34m  Info  [0m] Cache miss: 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @153:9...
[[34m  Info  [0m]  - Now solving 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @153:9...
[[34m  Info  [0m]  - Result for 'precond. (call run[State, Sym](thiss, epsClosure[State, ...)' VC for run @153:9:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @153:13...
[[34m  Info  [0m] Cache hit: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for run @153:13...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for run @152:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for run @152:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for run @155:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for run @155:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for run @155:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for run @155:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for run @147:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for run @147:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @159:15...
[[34m  Info  [0m] Cache hit: 'precond. (call subsetIsSmallerOrEqual[State](states, th ...)' VC for epsClosure @159:15...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @163:13...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, states, None[Sym ...)' VC for epsClosure @163:13...
[[34m  Info  [0m]  - Checking cache: 'precond. (call moveValid[State, Sym](thiss, states, Non ...)' VC for epsClosure @166:12...
[[34m  Info  [0m] Cache hit: 'precond. (call moveValid[State, Sym](thiss, states, Non ...)' VC for epsClosure @166:12...
[[34m  Info  [0m]  - Checking cache: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @173:14...
[[34m  Info  [0m] Cache miss: 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @173:14...
[[34m  Info  [0m]  - Now solving 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @173:14...
[[34m  Info  [0m]  - Result for 'precond. (call strictSubsetIsSmaller[State](states, new ...)' VC for epsClosure @173:14:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @175:7...
[[34m  Info  [0m] Cache miss: 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @175:7...
[[34m  Info  [0m]  - Now solving 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @175:7...
[[34m  Info  [0m]  - Result for 'precond. (call epsClosure[State, Sym](thiss, newStates))' VC for epsClosure @175:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @166:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @166:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @167:5...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for epsClosure @167:5...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @171:12...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @171:12...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @171:12...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @171:12:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for epsClosure @173:7...
[[34m  Info  [0m] Cache miss: 'body assertion' VC for epsClosure @173:7...
[[34m  Info  [0m]  - Now solving 'body assertion' VC for epsClosure @173:7...
[[34m  Info  [0m]  - Result for 'body assertion' VC for epsClosure @173:7:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for epsClosure @177:16...
[[34m  Info  [0m] Cache miss: 'postcondition' VC for epsClosure @177:16...
[[34m  Info  [0m]  - Now solving 'postcondition' VC for epsClosure @177:16...
[[34m  Info  [0m]  - Result for 'postcondition' VC for epsClosure @177:16:
[[34m  Info  [0m]  => VALID
[[34m  Info  [0m]  - Checking cache: 'body assertion: Measure not guaranteed positive' VC for epsClosure @163:5...
[[34m  Info  [0m] Cache hit: 'body assertion: Measure not guaranteed positive' VC for epsClosure @163:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[S, W](nfa, states, w))' VC for moveValid @209:5...
[[34m  Info  [0m] Cache hit: 'precond. (call move[S, W](nfa, states, w))' VC for moveValid @209:5...
[[34m  Info  [0m]  - Checking cache: 'precond. (call moveValid[S, W](nfa, xs, w))' VC for moveValid @216:9...
[[34m  Info  [0m] Cache hit: 'precond. (call moveValid[S, W](nfa, xs, w))' VC for moveValid @216:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[S, W](nfa, xs, w))' VC for moveValid @218:32...
[[34m  Info  [0m] Cache hit: 'precond. (call move[S, W](nfa, xs, w))' VC for moveValid @218:32...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for moveValid @212:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for moveValid @212:21...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for moveValid @214:9...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for moveValid @214:9...
[[34m  Info  [0m]  - Checking cache: 'postcondition' VC for moveValid @207:78...
[[34m  Info  [0m] Cache hit: 'postcondition' VC for moveValid @207:78...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for moveValid @211:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for moveValid @211:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for moveValid @214:16...
[[34m  Info  [0m] Cache hit: 'map usage' VC for moveValid @214:16...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for moveValid @214:16...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for moveValid @214:16...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for moveValid @217:32...
[[34m  Info  [0m] Cache hit: 'map usage' VC for moveValid @217:32...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for moveValid @217:32...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for moveValid @217:32...
[[34m  Info  [0m]  - Checking cache: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @140:25...
[[34m  Info  [0m] Cache hit: 'precond. (call move[State, Sym](thiss, xs, w))' VC for move @140:25...
[[34m  Info  [0m]  - Checking cache: 'body assertion' VC for move @138:21...
[[34m  Info  [0m] Cache hit: 'body assertion' VC for move @138:21...
[[34m  Info  [0m]  - Checking cache: 'match exhaustiveness' VC for move @137:5...
[[34m  Info  [0m] Cache hit: 'match exhaustiveness' VC for move @137:5...
[[34m  Info  [0m]  - Checking cache: 'map usage' VC for move @140:9...
[[34m  Info  [0m] Cache hit: 'map usage' VC for move @140:9...
[[34m  Info  [0m]  - Checking cache: 'cast correctness' VC for move @140:9...
[[34m  Info  [0m] Cache hit: 'cast correctness' VC for move @140:9...
[[34m  Info  [0m]  - Checking cache: 'precond. (call get[W](w))' VC for validSym @200:40...
[[34m  Info  [0m] Cache hit: 'precond. (call get[W](w))' VC for validSym @200:40...
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing bitvector arguments lexicographically)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for lemma
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for setInvariant
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for +
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for addIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for size
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for ++
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for unionOfSubsetsIsSubset
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for -
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subIsSound
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for --
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for diffContains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for diffSubsetSize
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for forall
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for move
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for moveValid
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for epsClosure
[[34m  Info  [0m]  => CLEARED (Decreases Processor)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing bitvector arguments lexicographically)
[[34m  Info  [0m] Result for exists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetExists
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for run
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for contains
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m] Result for subsetOf
[[34m  Info  [0m]  => CLEARED (Relation Processor comparing sum of argument sizes)
[[34m  Info  [0m]   ┌──────────────────────┐
[[34m  Info  [0m] ╔═╡ [31mverification summary[0m ╞═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └──────────────────────┘                                                                                                               ║
[[34m  Info  [0m] ║ [33mapply[0m                  [33madt invariant[0m                                                 [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:37:5[0m    [33m23.032[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m            [33mprecond. (call accepts[State, Sym](nfa, word))[0m                [33munknown[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:75:5[0m    [33m0.696[0m  ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m            [33mprecond. (call accepts[Set[State], Sym](apply[State, Sy ...)[0m  [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:75:26[0m   [33m20.271[0m ║
[[34m  Info  [0m] ║ [33mdfaNfaEquiv[0m            [33mprecond. (call run[Set[State], Sym](apply[State, Sym](n ...)[0m  [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:81:37[0m   [33m37.977[0m ║
[[34m  Info  [0m] ║ [33mepsClosureIdem[0m         [33mpostcondition[0m                                                 [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:233:69[0m  [33m20.939[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[State, Sym](nfa, states, word))[0m            [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:44:5[0m    [33m20.114[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](apply[State, Sym](n ...)[0m  [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:44:30[0m   [33m25.379[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:50:35[0m   [33m42.179[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:51:36[0m   [33m42.141[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:53:54[0m   [33m43.246[0m ║
[[34m  Info  [0m] ║ [33mlemma[0m                  [33mprecond. (call run[Set[State], Sym](dfa, states, word))[0m       [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:54:20[0m   [33m41.249[0m ║
[[34m  Info  [0m] ║ [33mlemma2[0m                 [33mpostcondition[0m                                                 [33mtimeout[0m  [33mU:smt-z3[0m  [33mAutomaton.scala:224:61[0m  [33m38.072[0m ║
[[34m  Info  [0m] ║ [33mstrictSubsetIsSmaller[0m  [33mpostcondition[0m                                                 [33mtimeout[0m  [33mU:smt-z3[0m  [33mUSet.scala:351:73[0m       [33m20.056[0m ║
[[34m  Info  [0m] ║ [33msubsetTail[0m             [33mpostcondition[0m                                                 [33mtimeout[0m  [33mU:smt-z3[0m  [33mUSet.scala:200:5[0m        [33m20.221[0m ║
[[34m  Info  [0m] ║ [33msubsetTrans[0m            [33mpostcondition[0m                                                 [33mtimeout[0m  [33mU:smt-z3[0m  [33mUSet.scala:206:78[0m       [33m20.052[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [31mtotal: 395  valid: 380  (326 from cache) invalid: 0    unknown: 15   time: 455.327[0m                                                     ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m]   ┌─────────────────────┐
[[34m  Info  [0m] ╔═╡ [32mtermination summary[0m ╞══════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └─────────────────────┘                                                          ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 85   valid: 85   (0 from cache) invalid: 0    unknown: 0    time:  84.606[0m ║
[[34m  Info  [0m] ╚══════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Cycle took 551288 ms
[[34m  Info  [0m] 
[[34m  Info  [0m] 
[[34m  Info  [0m] Waiting for source changes...
[[34m  Info  [0m] 
[[34m  Info  [0m] 
